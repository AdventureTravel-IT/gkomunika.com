{% style %}
  .invalid-popup {
    display: none;
    position: fixed;
    z-index: 9999;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .invalid-popup__content {
    background-color: var(--color-neutral);
    padding: 30px;
    max-width: 450px;
    width: 100%;
    border-radius: 10px;
    text-align: center;
    color: var(--color-primary);
    font-size: var(--font-extra-large);
    margin: 50px auto;
  }

  .invalid-popup__content h2 {
    font-size: 34px;
    font-weight: bold;
    line-height: 1.5;
    margin: 10px 0;
    color: var(--color-primary);
  }

  .invalid-popup__button {
    display: flex;
    gap: 15px;
  }

  .invalid-popup__button button,
  #invalid-popup__button-hide,
  #btn-topup__contact-button,
  #btn-topup__buy-button {
    width: 100%;
    padding: 15px;
    border-radius: 10px;
    border: none;
    cursor: pointer;
    font-size: var(--font-large);
  }

  #invalid-popup__buy-button,
  #btn-topup__buy-button {
    background-color: var(--color-secondary);
    color: var(--color-neutral);
  }

  #invalid-popup__contact-button,
  #btn-topup__contact-button {
    background-color: #25d366;
    color: var(--color-neutral);
  }

  #invalid-popup__button-hide {
    margin-top: 15px;
    background-color: var(--color-primary);
    color: var(--color-neutral);
  }

  #iccid {
    padding: 15px;
    border-radius: 15px;
    width: 100%;
    border: 1px solid var(--color-primary);
    background-color: var(--color-neutral);
    color: var(--color-primary);
    font-size: var(--font-large);
  }

  #iccid:focus {
    outline: none;
  }

  #iccid::placeholder {
    color: var(--color-primary);
  }

  #check-iccid {
    padding: 15px;
    border-radius: 15px;
    width: 100%;
    border: 1px solid var(--color-primary);
    background-color: var(--color-primary);
    color: var(--color-neutral);
    font-size: var(--font-large);
    font-weight: bold;
    margin-top: 20px;
    cursor: pointer;
  }

  .check-data-usage__container {
    margin: 0 auto;
    max-width: 1920px;
  }

  .check-data-usage__wrapper {
    padding: 20px 20%;
  }

  .btn-topup-information {
    display: flex;
    gap: 10px;
    margin-top: 15px;
  }

  .check-data-usage__esim-information,
  .check-data-usage__usage-content {
    background-color: var(--color-neutral);
    border-radius: 15px;
    padding: 15px;
    color: var(--color-primary);
    margin-top: 20px;
    font-size: var(--font-large);
  }

  .button-topup__usage-wrapper {
    padding: 15px 0;
    border-radius: 15px;
    background-color: var(--color-neutral);
    margin-top: 20px;
    font-size: var(--font-extra-large);
    color: var(--color-primary);
    text-align: center;
  }

  .check-data-usage__esim-information {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
    text-align: center;
  }

  .check-data-usage__esim-information h3,
  .check-data-usage__usage-content h2,
  .check-data-usage__usage-content h3 {
    color: var(--color-primary);
    font-weight: bold;
    margin: 10px 0;
    line-height: 1.3;
  }

  .esim-information__wrapper p {
    margin: 0;
    line-height: 1.3;
  }

  .esim-information__wrapper span {
    font-weight: bold;
  }

  .data-usage__wrapper {
    display: flex;
    justify-content: space-between;
  }

  .data-usage__wrapper p {
    margin: 0;
    width: 150px;
  }

  .data-usage__wrapper p:nth-child(3) {
    justify-content: flex-end;
  }

  .data-usage__wrapper p:nth-child(2) {
    text-align: center;
  }

  .check-data-usage__total-usage {
    margin-bottom: 15px;
  }

  .total-data-usage__wrapper {
    padding: 15px;
    border-radius: 15px;
    border: 1px solid var(--color-border);
    display: flex;
    width: 30%;
    justify-content: space-between;
    margin-bottom: 15px;
  }

  .total-data-usage__wrapper p {
    margin: 0;
  }

  .check-data-usage__header p {
    font-size: 24px;
    font-weight: bold;
    color: var(--color-primary);
    margin: 0;
  }

  .check-data-usage__header span {
    font-size: var(--font-large);
    color: var(--color-primary);
  }
  .data-usage__wrapper p:nth-child(3) {
    display: flex;
    justify-content: flex-end;
  }
  input[type='number']::-webkit-outer-spin-button,
  input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  /* Firefox */
  input[type='number'] {
    -moz-appearance: textfield;
  }

  .top-up-plan-btn {
    margin-top: 20px;
    background-color: var(--color-primary);
    color: var(--color-neutral);
    border: none;
    padding: 15px 30px;
    border-radius: 10px;
    font-size: var(--font-large);
    cursor: pointer;
    width: 100%;
    text-align: center;
    font-weight: bold;
  }

  @media (max-width: 768px) {
    .check-data-usage__wrapper {
      padding: 20px 24px;
    }
    .total-data-usage__wrapper {
      width: 100%;
    }
  }
{% endstyle %}

<div class="check-data-usage__container">
  <div class="check-data-usage__wrapper">
    <div class="check-data-usage__header">
      <p>Check Data Usage</p>
      <span>Enter your ICCID</span>
    </div>
    <div class="check-data-usage__input">
      <input
        type="number"
        id="iccid"
        placeholder="Input ICCID Number"
        required
      >
      <button id="check-iccid" type="button">Next</button>
    </div>
    <div class="check-data-usage__result">
      <div id="result"></div>
    </div>
  </div>
</div>

<div class="invalid-popup" id="invalid-popup">
  <div class="invalid-popup__content">
    <h2>ICCID Invalid</h2>
    <p>
      Sorry currently your SIM does not support data usage check through website. You can cek your data directly in your
      phone settings.
    </p>
    <p>Please contact our WhatsApp Customer Service for more information</p>
    <div class="invalid-popup__button">
      <button id="invalid-popup__buy-button"><span>Buy eSIM</span></button>
      <button id="invalid-popup__contact-button"><span>Contact CS</span></button>
    </div>
    <button id="invalid-popup__button-hide"><span>OK</span></button>
  </div>
</div>

<div class="iccid-popup" id="iccid-popup" style="display:none;">
  <div class="invalid-popup__content">
    <h2>Enter ICCID</h2>
    <p>Please input your ICCID to continue to Top Up</p>
    <input type="number" id="popup-iccid" placeholder="Input ICCID Number" style="width:100%;padding:15px;margin:15px 0;border-radius:10px;border:1px solid var(--color-primary);">
    <button id="iccid-popup-submit" style="padding:15px;width:100%;border-radius:10px;background-color:var(--color-primary);color:#fff;font-size:18px;">Continue</button>
    <button id="iccid-popup-cancel" style="padding:15px;width:100%;margin-top:10px;border-radius:10px;background-color:#ccc;color:#000;font-size:18px;">Cancel</button>
  </div>
</div>

{% assign collection = collections['top-up-plan'] %}
<script>
  const productCategories = [
    {% for product in collection.products %}
      {% if product.metafields.product.category %}
        "{{ product.metafields.product.category.value }}",
      {% endif %}
    {% endfor %}
  ];
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const iccidInput = document.getElementById('iccid');
    const checkBtn = document.getElementById('check-iccid');
    const resultEl = document.getElementById('result');
    const invalidPopup = document.getElementById('invalid-popup');
    const btnHidePopup = document.getElementById('invalid-popup__button-hide');
    const btnBuyEsim = document.getElementById('invalid-popup__buy-button');
    const btnContactCs = document.getElementById('invalid-popup__contact-button');

    let lastSubmit = 0;

    const prefixVendorMap = [
      { prefix: '89859', vendor: 'AF'}, //category: 'Top_Up_B' // AE
      { prefix: '89862', vendor: 'AF'}, //category: 'Top_Up_B' // AS
      { prefix: '89810', vendor: 'TE'}, //category: 'Top_Up_C' // TE
      { prefix: '2210', vendor: 'BS'}, //category: 'Top_Up_A' // BS
      { prefix: '8981200', vendor: 'BE'}, //category: 'Top_Up_A' // BE
      { prefix: '89852', vendor: 'BE'}, //category: 'Top_Up_A' // BE
    ];

    const vendorCategoryMap = {
      // 'AF': 'Top_Up_B', // AE & AS can't be top up
      // 'BE': 'Top_Up_A', // BE can't be top up
      'BS': 'Top_Up_A', // BS
      // 'TE': 'Top_Up_C', // TE can't be top up
    };

    function detectVendor(iccid) {
      return prefixVendorMap.find((item) => iccid.startsWith(item.prefix))?.vendor || null;
    }

    function showInvalidPopup() {
      invalidPopup.style.display = 'block';
    }

    function hideInvalidPopup() {
      invalidPopup.style.display = 'none';
    }

    // ✅ Format Tanggal
    function formatDate(dateStr) {
      if (!dateStr || dateStr.length !== 8) return dateStr;
      return `${dateStr.slice(0, 4)}-${dateStr.slice(4, 6)}-${dateStr.slice(6)}`;
    }

    // ✅ Fungsi Konversi Data Usage
    function formatDataUsage(value, vendor) {
      value = Number(value) || 0; // pastikan selalu number
      const KB = 1024;
      const MB = 1024 * KB;
      const GB = 1024 * MB;

      if (vendor === 'BE' || vendor === 'BS') {
        // value dalam KB
        if (value >= MB) {
          return (value / MB).toFixed(2) + ' GB';
        } else if (value >= KB) {
          return (value / KB).toFixed(2) + ' MB';
        } else {
          return value.toFixed(2) + ' KB';
        }
      }

      // Vendor AF & TE → value dalam Bytes
      if (value >= GB) {
        return (value / GB).toFixed(2) + ' GB';
      } else if (value >= MB) {
        return (value / MB).toFixed(2) + ' MB';
      } else {
        return (value / KB).toFixed(2) + ' KB';
      }
    }

    // ✅ Render SIM Info
    function renderEsimInfo(itemData, vendor) {
      return `
        <div class="check-data-usage__esim-information">
          <h3>SIM Card Information</h3>
          <div class="esim-information__wrapper">
            <p>Your Bundle</p>
            <span>${itemData.skuName || itemData.product_name || '-'}</span>
          </div>
          <div class="esim-information__wrapper">
            <p>Active Date</p>
            <span>${vendor === 'AF' ? itemData.useSDate : itemData.planStartTime}</span>
          </div>
          <div class="esim-information__wrapper">
            <p>End Date</p>
            <span>${vendor === 'AF' ? itemData.useEDate : itemData.planEndTime}</span>
          </div>
        </div>
      `;
    }

    function renderTopUpButton() {
      return `<button id="top-up-plan" class="top-up-plan-btn">Top Up</button>`;
    }

    function renderBuyEsimButtons() {
      return `
        <div class="button-topup__usage-wrapper">
          <span>Need more data? Buy eSIM from our website.</span>
          <div class="btn-topup-information">
            <button id="btn-topup__contact-button"><span>Contact CS</span></button>
            <button id="btn-topup__buy-button"><span>Buy eSIM</span></button>
          </div>
        </div>
      `;
    }

    // ✅ Render Total Usage per Country
    function renderTotalUsage(countryUsageMap, vendor) {
      if (Object.keys(countryUsageMap).length === 0) {
        return '<div>No data usage yet.</div>';
      }
      return Object.entries(countryUsageMap)
        .map(([country, totalBytes]) => `
          <div class="total-data-usage__wrapper">
            <p>${country}</p>
            <p>${formatDataUsage(totalBytes, vendor)}</p>
          </div>
        `)
        .join('');
    }

    // ✅ Render Data Usage Detail
    function renderDataUsage(dataUsage, vendor) {
      if (!dataUsage?.length) {
        return '<p>No data usage yet.</p>';
      }

      return dataUsage.map((item) => {
        const country = vendor === 'AF' ? (item.enus || '-') : (item.country || '-');
        const date = vendor === 'AF' ? item.usageDate : item.usedDate;
        const usage = vendor === 'AF' ? Number(item.usage || 0) : Number(item.usedAmount || 0);

        return `
          <div class="data-usage__wrapper">
            <p>${country}</p>
            <p>${formatDate(date)}</p>
            <p>${formatDataUsage(usage, vendor)}</p>
          </div>
        `;
      }).join('');
    }

    function attachTopUpButtonListeners() {
      const btnTopUpBuyEsim = document.getElementById('btn-topup__buy-button');
      const btnTopUpContactCs = document.getElementById('btn-topup__contact-button');

      if (btnTopUpBuyEsim) {
        btnTopUpBuyEsim.addEventListener('click', () => {
          window.location.href = 'https://gkomunika.com/pages/all-destination';
        });
      }

      if (btnTopUpContactCs) {
        btnTopUpContactCs.addEventListener('click', () => {
          window.location.href = 'https://wa.me/628986454071';
        });
      }
    }

    async function checkICCID() {
      const now = Date.now();
      if (now - lastSubmit < 3000) return;
      lastSubmit = now;

      const iccid = iccidInput.value.trim();
      if (!iccid || iccid.length < 10) {
        resultEl.innerHTML = `<p style="color:red;">Invalid ICCID (minimum 10 digits)</p>`;
        return;
      }

      const vendor = detectVendor(iccid);
      if (!vendor) {
        showInvalidPopup();
        return;
      }

      checkBtn.disabled = true;
      checkBtn.textContent = 'Loading...';

      try {
        const response = await fetch('https://gkomunika.id/api/v1/check/data_info', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams({ iccid }),
        });

        const contentType = response.headers.get('Content-Type') || '';
        const data = contentType.includes('application/json') ? await response.json() : {};

        if (data.status === 'error' || data.message === 'Order not found') {
          showInvalidPopup();
          return;
        }

        let esimHtml = '';
        let dataUsageHtml = '';
        let totalUsageHtml = '';
        let totalUsedBytes = 0;

        // ✅ Vendor AF
        if (vendor === 'AF') {
          if (data.success && data.data) {
            const itemData = data.data;
            const dataUsage = itemData.itemList || [];
            const countryUsageMap = {};

            for (const item of dataUsage) {
              const country = item.enus || '-';
              const usage = Number(item.usage || 0);
              countryUsageMap[country] = (countryUsageMap[country] || 0) + usage;
              totalUsedBytes += usage;
            }

            esimHtml = renderEsimInfo(itemData, vendor);
            dataUsageHtml = renderDataUsage(dataUsage, vendor);
            totalUsageHtml = renderTotalUsage(countryUsageMap, vendor);

            const categoryNeeded = vendorCategoryMap[vendor];
            const hasCategory = productCategories.includes(categoryNeeded);

            const buttonHtml = hasCategory
              ? renderTopUpButton()
              : renderBuyEsimButtons();


            resultEl.innerHTML = `
              ${esimHtml}
              <div class="check-data-usage__usage-content">
                <div style="text-align: center;"><h2>Data Usage</h2></div>
                <div class="check-data-usage__total-usage">
                  <div style="display: flex; justify-content: space-between;">
                    <h3>Total Usage:</h3>
                    <span style="font-weight: bold;">${formatDataUsage(totalUsedBytes, vendor)}</span>
                  </div>
                  ${totalUsageHtml}
                </div>
                <div class="check-data-usage__data-usage">
                  ${dataUsageHtml}
                </div>
                ${buttonHtml}
              </div>
            `;
          } else {
            resultEl.innerHTML = renderBuyEsimButtons();
          }
        }

        // ✅ Vendor TE
        else if (vendor === 'TE') {
          if (data.code !== '0000' || !data.data) {
            showInvalidPopup();
            return;
          }

          const detail = data.data.detail || {};
          const usage = data.data.usage || {};
          const productName = data.data.product_name || '-';

          function formatTEData(value) {
            if (value === 'unlimited') return 'Unlimited';
            const val = parseFloat(value) || 0;
            if (val >= 1024) {
              return (val / 1024).toFixed(2) + ' GB';
            } else {
              return val.toFixed(2) + ' MB';
            }
          }

          const esimHtml = `
            <div class="check-data-usage__esim-information">
              <h3>SIM Card Information</h3>
              <div class="esim-information__wrapper">
                <p>Your Bundle</p>
                <span>${productName}</span>
              </div>
              <div class="esim-information__wrapper">
                <p>Device</p>
                <span>${detail.installDevice || '-'}</span>
              </div>
              <div class="esim-information__wrapper">
                <p>Installed On</p>
                <span>${detail.installTime || '-'}</span>
              </div>
              <div class="esim-information__wrapper">
                <p>Status</p>
                <span>${detail.state || '-'}</span>
              </div>
            </div>
          `;

          const dataUsageHtml = `
            <div class="check-data-usage__usage-content">
              <div style="text-align: center;"><h2>Data Usage</h2></div>
              <div class="check-data-usage__total-usage">
                <div style="display: flex; justify-content: space-between;">
                  <h3>Total:</h3>
                  <span style="font-weight: bold;">${formatTEData(usage.dataTotal)}</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                  <h3>Used:</h3>
                  <span style="font-weight: bold;">${formatTEData(usage.dataUsage)}</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                  <h3>Remaining:</h3>
                  <span style="font-weight: bold;">${formatTEData(usage.dataResidual)}</span>
                </div>
              </div>
            </div>
          `;

          const categoryNeeded = vendorCategoryMap[vendor];
          const hasCategory = productCategories.includes(categoryNeeded);

          const buttonHtml = hasCategory
            ? renderTopUpButton()
            : renderBuyEsimButtons();

          resultEl.innerHTML = `
            ${esimHtml}
            ${dataUsageHtml}
            ${buttonHtml}
          `;

          attachTopUpButtonListeners();
          return;
        }

        // ✅ Vendor BE / BS
        else {
          const itemData = data?.tradeData?.subOrderList?.[0];
          const dataUsage = itemData?.usageInfoList || [];
          const countryUsageMap = {};

          if (data.tradeCode !== '1000' || !itemData) {
            resultEl.innerHTML = renderBuyEsimButtons();
            attachTopUpButtonListeners();
            return;
          }

          for (const item of dataUsage) {
            const country = item.country || '-';
            const usedAmount = Number(item.usedAmount || 0);
            countryUsageMap[country] = (countryUsageMap[country] || 0) + usedAmount;
            totalUsedBytes += usedAmount;
          }

          esimHtml = renderEsimInfo(itemData, vendor);
          dataUsageHtml = renderDataUsage(dataUsage, vendor);
          totalUsageHtml = renderTotalUsage(countryUsageMap, vendor);
          const categoryNeeded = vendorCategoryMap[vendor];
          const hasCategory = productCategories.includes(categoryNeeded);

          const buttonHtml = hasCategory
            ? renderTopUpButton()
            : renderBuyEsimButtons();

          resultEl.innerHTML = `
            ${esimHtml}
            <div class="check-data-usage__usage-content">
              <div style="text-align: center;"><h2>Data Usage</h2></div>
              <div class="check-data-usage__total-usage">
                <div style="display: flex; justify-content: space-between;">
                  <h3>Total Usage:</h3>
                  <span style="font-weight: bold;">${formatDataUsage(totalUsedBytes, vendor)}</span>
                </div>
                ${totalUsageHtml}
              </div>
              <div class="check-data-usage__data-usage">
                ${dataUsageHtml}
              </div>
              ${buttonHtml}
            </div>
          `;
        }

        attachTopUpButtonListeners();
      } catch (e) {
        console.error(e);
        resultEl.innerHTML = `<p style="color:red;">Connection error.</p>`;
      } finally {
        checkBtn.disabled = false;
        checkBtn.textContent = 'Next';
      }
    }

    checkBtn.addEventListener('click', checkICCID);
    btnHidePopup.addEventListener('click', hideInvalidPopup);
    btnBuyEsim.addEventListener('click', () => {
      window.location.href = 'https://gkomunika.com/pages/all-destination';
    });
    btnContactCs.addEventListener('click', () => {
      window.location.href = 'https://wa.me/628986454071';
    });

    document.addEventListener('click', (e) => {
      if (e.target?.id === 'top-up-plan') {
        const iccidValue = document.getElementById('iccid')?.value?.trim();
        if (iccidValue) {
          sessionStorage.setItem('iccid', iccidValue);
        }
        window.location.href = '/pages/top-up';
      }
    });
  });
</script>

{% schema %}
{
  "name": "Check Data Usage",
  "settings": [],
  "presets": [
    {
      "name": "Check Data Usage",
      "category": "Custom"
    }
  ]
}
{% endschema %}
