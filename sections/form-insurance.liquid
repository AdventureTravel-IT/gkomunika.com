{% style %}
  .form-insurance__container {
    max-width: 1920px;
    margin: 0 auto;
  }
  .form-insurance__content-wrapper {
    padding: 20px 20%;
  }
  .form-insurance {
    display: flex;
    gap: 10px;
  }
  .form-insurance__label-wrapper {
    display: flex;
    align-items: center;
    width: 100%;
    background-color: var(--color-primary);
    color: var(--color-neutral);
    padding: 0 15px;
    height: 45px;
  }
  .form-insurance__label-index {
    border-radius: 15px;
    background-color: var(--color-secondary);
    padding: 5px 15px;
    line-height: 1;
    margin: 0 10px 0 0;
    display: flex;
    align-items: center;
    width: 55px;
    height: 26px;
  }
  .form-insurance__label-title {
    display: flex;
  }

  .form-insurance__form {
    padding: 15px;
    border-radius: 0 0 15px 15px;
    background-color: var(--color-neutral);
    margin-bottom: 20px;
  }

  .form-index {
    color: var(--color-neutral);
    border-radius: 15px 15px 0 0;
  }

  .form-insurance__checkout {
    width: 100%;
    background-color: var(--color-neutral);
    padding: 15px;
    position: relative;
    border-radius: 15px;
    color: var(--color-primary);
  }
  .form-insurance__checkout-button,
  .insurance-form__add-form {
    border-radius: 15px;
    padding: 10px 15px;
    color: var(--color-neutral);
    font-size: var(--font-large);
    outline: none;
    border: none;
    width: 130px;
    transition: transform 0.3s ease
    , box-shadow 0.3s ease;
  }
  .form-insurance__checkout-button {
    background-color: var(--color-primary);
  }
  .insurance-form__add-form {
    background-color: var(--color-secondary);
  }
  .form-insurance__checkout-button:hover {
    transform: translateY(2px);
    box-shadow: var(--box-shadow);
  }
  .form-insurance__right {
    width: 80%;
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  .form-insurance__wrapper {
    display: flex;
    gap: 15px;
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
    flex-wrap: wrap;
  }
  .form-insurance__field label,
  .form-insurance__wrapper label {
    color: var(--color-primary);
    font-size: 16px;
  }

  .form-insurance__field select,
  .form-insurance__wrapper input {
    border-radius: 10px;
    outline: none;
    border: 1px solid var(--color-border);
    background-color: var(--color-background);
    padding: 10px;
    color: var(--color-primary);
  }
  .form-insurance__wrapper input::placeholder {
    color: var(--color-primary);
    letter-spacing: 0.5px;
    font-size: 14px;
  }
  .form-insurance__field {
    display: flex;
    flex-direction: column;
    flex: 1;
    max-width: 100%;
  }
  .form-insurance__wrapper-item {
    display: flex;
    flex: 1;
    gap: 10px;
  }
  .form-insurance__wrapper-item .form-insurance__field {
    flex: 1;
  }
  .form-insurance__field input,
  .form-insurance__field select,
  .form-insurance__field textarea {
    width: 100%;
    box-sizing: border-box;
  }
  .form-insurance__field textarea {
    color: var(--color-primary);
    min-height: 100px;
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
    outline: none;
    border-radius: 15px;
    border: 1px solid var(--color-border);
  }
  .form-insurance__field textarea::placeholder {
    color: var(--color-primary);
    font-size: 14px;
  }
  #add-form-button,
  #checkout-button {
    margin-left: auto;
    margin-top: 10px;
  }

  .form-insurance__button-wrapper {
    margin-left: auto;
    display: flex;
    align-items: center;
  }
  .insurance-form__remove-form {
    border-radius: 15px;
    background-color: red;
    padding: 5px 15px;
    outline: none;
    border: none;
    color: var(--color-neutral);
    font-size: var(--font-large);
  }
{% endstyle %}

{% capture FormInsurance %}
<form class="form-insurance">
  <div class="form-insurance__field">
    <label for="salutation">Title</label>
    <select id="salutation" name="Salutation" required>
      <option value="Mr">Mr</option>
      <option value="Mrs">Mrs</option>
      <option value="Miss">Miss</option>
    </select>
  </div>

  <section class="form-insurance__right">
    <div class="form-insurance__wrapper">
      <div class="form-insurance__field">
        <label for="first-name">First Name</label>
        <input type="text" id="first-name" aria-label="First Name" name="First Name" placeholder="First Name" required>
      </div>

      <div class="form-insurance__field">
        <label for="last-name">Last Name</label>
        <input type="text" id="last-name" aria-label="Last Name" name="Last Name" placeholder="Last Name" required>
      </div>
    </div>

    <div class="form-insurance__wrapper">
      <div class="form-insurance__field">
        <label for="place-of-birth">Place Of Birth</label>
        <input type="text" id="place-of-birth" aria-label="Place Of Birth" name="Place Of Birth"
          placeholder="Place Of Birth" required>
      </div>

      <div class="form-insurance__wrapper-item">
        <div class="form-insurance__field">
          <label for="day">Day</label>
          <input type="number" id="day" name="Day" placeholder="DD" min="1" max="31" required>
        </div>

        <div class="form-insurance__field">
          <label for="month">Month</label>
          <input type="number" id="month" name="Month" placeholder="MM" min="1" max="12" required>
        </div>

        <div class="form-insurance__field">
          <label for="year">Year</label>
          <input type="number" id="year" name="Year" placeholder="YYYY" min="1900" max="9999" required>
        </div>
      </div>
    </div>

    <div class="form-insurance__wrapper">
      <div class="form-insurance__field">
        <label for="passport-number">Passport Number</label>
        <input type="text" id="passport-number" name="Passport Number" aria-label="passport-number"
          placeholder="Passport Number" required>
      </div>

      <div class="form-insurance__field">
        <label for="mobile-phone">Mobile Phone</label>
        <input type="number" id="mobile-phone" aria-label="Mobile Phone" name="Mobile Phone" placeholder="Mobile Phone"
          required>
      </div>
    </div>

    <div class="form-insurance__wrapper">
      <div class="form-insurance__field">
        <label for="email">Email</label>
        <input type="email" id="email" name="Email" aria-label="Email" placeholder="Email" required>
      </div>

      <div class="form-insurance__field">
        <label for="additional-email">Additional Email</label>
        <input type="email" id="additional-email" name="Additional Email" aria-label="Additional Email"
          placeholder="Additional Email" required>
      </div>
    </div>

    <div class="form-insurance__wrapper">
      <div class="form-insurance__field">
        <label for="city">City</label>
        <input type="text" id="city" name="City" aria-label="City" placeholder="City" required>
      </div>

      <div class="form-insurance__field">
        <label for="postal-code">Postal Code</label>
        <input type="text" id="postal-code" name="Postal Code" aria-label="Postal Code" placeholder="Postal Code"
          required>
      </div>
    </div>

    <div class="form-insurance__wrapper">
      <div class="form-insurance__field">
        <label for="address">Address</label>
        <textarea type="text" id="address" name="Address" aria-label="Address" placeholder="Address"
          required></textarea>
      </div>
    </div>

    <div class="form-insurance__wrapper relationship-wrapper">
      <label>Relationship with Policy Holder<span style="color: red">*</span></label>
      <div>
        <input type="radio" id="relationship-spouse" name="Relationship" value="Spouse" required>
        <label for="relationship-spouse">Spouse</label>
      </div>
      <div>
        <input type="radio" id="relationship-child" name="Relationship" value="Child" required>
        <label for="relationship-child">Child</label>
      </div>
    </div>
  </section>
</form>
{% endcapture %}

{% capture FormItineray %}
<div class="form-insurance__itinerary-date">
  <div class="form-insurance__wrapper">
    <div class="form-insurance__field">
      <label for="start-date">Start Date</label>
      <input type="date" id="start-date" name="Start Date" required>
    </div>
    <div class="form-insurance__field">
      <label for="end-date">End Date</label>
      <input type="date" id="end-date" name="End Date" required>
    </div>
  </div>
</div>
{% endcapture %}

<div class="form-insurance__container">
  <div class="form-insurance__content-wrapper">
    <div class="form-insurance__form-section">
      <div class="form-section--wrapper" style="background-color: red;">
        <div class="section-header"></div>
        <section id="form-individual"></section>
      </div>

      <div class="form-section--wrapper" style="background-color: blue;">
        <div class="section-header"></div>
        <section id="form-duoplus"></section>
      </div>

      <div class="form-section--wrapper" style="background-color: orange;">
        <section id="form-family"></section>
      </div>

      <template id="form-insurance-template">
        {{ FormInsurance }}
      </template>

      <template id="form-itinerary-template">
        {{ FormItineray }}
      </template>
    </div>

    <section class="form-insurance__checkout">
      <div style="display: flex; flex-direction: column;" id="confirmation-checkboxes">
        <label for="check-data">
          <input
            type="checkbox"
            id="check-data-global"
            required>
          Data is correct
        </label>

        <label for="check-itinerary">
          <input
            type="checkbox"
            id="check-itinerary-global"
            required>
          Flight itinerary is the same
        </label>
      </div>

      <button
        id="checkout-button"
        type="button"
        class="form-insurance__checkout-button"
        onclick="handleCheckout()">
        Checkout
      </button>
    </section>
  </div>
</div>

<script>
  // Mengambil data ProductItems dari sessionStorage
  const ProductItems = JSON.parse(sessionStorage.getItem('ProductItems'));
  
  if (ProductItems) {
    console.log('Retrieved ProductItems from sessionStorage:', ProductItems);
    // Tampilkan productTitle dan variantTitle dalam <pre>
    const sectionMap = {
      'form-individual': 'Individual',
      'form-duoplus': 'DuoPlus',
      'form-family': 'Family',
    };
  
    Object.entries(sectionMap).forEach(([sectionId, variantType]) => {
      const wrapper = document.getElementById(sectionId)?.closest('.form-section--wrapper');
      const product = ProductItems.find((item) => item.variantType === variantType && item.category === 'Insurance');
  
      if (wrapper && product) {
        const titleEl = wrapper.querySelector('.product-title');
        const variantEl = wrapper.querySelector('.variant-title');
  
        if (titleEl) titleEl.innerHTML = `${product.productTitle}`;
        if (variantEl) variantEl.textContent = product.variantTitle;
      }
    });
  
    // Membuat container untuk form di masing-masing section
    const individualContainer = document.getElementById('form-individual');
    const duoplusContainer = document.getElementById('form-duoplus');
    const familyContainer = document.getElementById('form-family');
  
    // Mengelompokkan produk berdasarkan variantType
    const insuranceProducts = ProductItems.filter((item) => item.category === 'Insurance');
  
    // Proses untuk variantType Individual
    const individualProducts = insuranceProducts.filter((item) => item.variantType === 'Individual');
    individualProducts.forEach((product) => {
      const formTemplate = document.getElementById('form-insurance-template').innerHTML;
      const formItineraryTemplate = document.getElementById('form-itinerary-template').innerHTML;
  
      for (let i = 0; i < product.quantity; i++) {
        const formWrapper = document.createElement('div');
        formWrapper.classList.add('form-section--wrapper');
  
        formWrapper.innerHTML = `
      <section>
        <div class="form-insurance__section-wrapper">
        <div class="form-insurance__section-header">
        <p class="product-title">${product.productTitle}</p>
          <p class="variant-title">${product.variantTitle}</p>
        </div>
        
          <div class="form-insurance__label-wrapper">
            <span class="form-insurance__label-index">${getFormIndexText(i + 1)}</span>
            <span>Insured (Policy Holder)</span>
          </div>
          ${formTemplate}
        </div>
      </section>
    `;
  
        individualContainer.appendChild(formWrapper);
      }
    });
  
    // Proses untuk variantType DuoPlus
    const duoplusProducts = insuranceProducts.filter((item) => item.variantType === 'DuoPlus');
  
    duoplusProducts.forEach((product) => {
      console.log(`Processing DuoPlus Product: ${product.productTitle} with quantity ${product.quantity}`);
  
      const formWrapper = document.createElement('div');
      formWrapper.classList.add('form-section--wrapper');
  
      const formTemplateElement = document.getElementById('form-insurance-template');
      const formTemplate = formTemplateElement.innerHTML;
  
      for (let i = 0; i < product.quantity; i++) {
        const formElement = document.createElement('div');
        formElement.classList.add('form-insurance__section-wrapper');
  
        const index = i + 1;
        const label = index === 1 ? 'Insured (Policy Holder)' : 'Traveler';
  
        // 🔽 Hanya tampilkan header di form pertama
        if (i === 0) {
          const sectionHeader = document.createElement('div');
          sectionHeader.classList.add('form-insurance__section-header');
  
          const productTitle = document.createElement('p');
          productTitle.classList.add('product-title');
          productTitle.textContent = product.productTitle || '';
  
          const variantTitle = document.createElement('p');
          variantTitle.classList.add('variant-title');
          variantTitle.textContent = product.variantTitle || '';
  
          sectionHeader.appendChild(productTitle);
          sectionHeader.appendChild(variantTitle);
          formElement.appendChild(sectionHeader);
        }
  
        // 🔽 Label wrapper
        const labelDivWrapper = document.createElement('div');
        labelDivWrapper.classList.add('form-insurance__label-wrapper');
  
        const labelTitleDiv = document.createElement('div');
        labelTitleDiv.classList.add('form-insurance__label-title');
  
        const spanIndex = document.createElement('span');
        spanIndex.textContent = getFormIndexText(index);
        spanIndex.classList.add('form-insurance__label-index');
  
        const spanLabel = document.createElement('span');
        spanLabel.textContent = label;
  
        labelTitleDiv.appendChild(spanIndex);
        labelTitleDiv.appendChild(spanLabel);
        labelDivWrapper.appendChild(labelTitleDiv);
        formElement.appendChild(labelDivWrapper);
  
        // 🔽 Masukkan isi form
        const formContainer = document.createElement('div');
        formContainer.innerHTML = formTemplate;
  
        formElement.appendChild(formContainer);
        duoplusContainer.appendChild(formElement);
      }
  
      console.log(`Total DuoPlus Forms added: ${product.quantity}`);
    });
  
    // Fungsi untuk menentukan urutan teks (1st, 2nd, 3rd, dll)
    function getFormIndexText(index) {
      const suffix = ['th', 'st', 'nd', 'rd'];
      const v = index % 100;
      return index + (suffix[(v - 20) % 10] || suffix[v] || suffix[0]);
    }
  
    const formTemplateElement = document.getElementById('form-insurance-template');
    const formTemplate = formTemplateElement.innerHTML;
  
    const familyProducts = insuranceProducts.filter((item) => item.variantType === 'Family');
    familyProducts.forEach((product) => {
      console.log(`Processing Family Product: ${product.productTitle} with quantity ${product.quantity}`);
  
      for (let q = 0; q < product.quantity; q++) {
        const formWrapper = document.createElement('div');
        formWrapper.classList.add('form-section--wrapper');
        formWrapper.style.marginBottom = '30px';
  
        // 🔽 Tambahkan HEADER ke formWrapper
        const sectionHeader = document.createElement('div');
        sectionHeader.classList.add('form-insurance__section-header');
  
        const productTitle = document.createElement('p');
        productTitle.classList.add('product-title');
        productTitle.textContent = product.productTitle || '';
  
        const variantTitle = document.createElement('p');
        variantTitle.classList.add('variant-title');
        variantTitle.textContent = product.variantTitle || '';
  
        sectionHeader.appendChild(productTitle);
        sectionHeader.appendChild(variantTitle);
        formWrapper.appendChild(sectionHeader);
  
        // 🔽 Container untuk form-form Family
        const formsContainer = document.createElement('div');
        formsContainer.classList.add('family-forms-container');
        const uniqueId = `form-family-${Date.now()}-${q}`;
        formsContainer.setAttribute('data-section-id', uniqueId);
  
        // 🔽 Fungsi createForm menerima product
        const createForm = (fromAdd = false, product) => {
          const wrapper = document.createElement('div');
          wrapper.innerHTML = formTemplate;
  
          const formElement = wrapper.querySelector('form');
          if (!formElement) return null;
  
          formElement.classList.add('form-family');
  
          const index = formsContainer.querySelectorAll('.form-family').length;
  
          let label = '';
          if (index === 0) label = 'Insured (Policy Holder)';
          else if (index === 1) label = 'Traveler';
          else if (index === 2 || index === 3) label = 'Traveler (Child)';
  
          const getOrdinalSuffix = (i) => {
            const j = i % 10,
              k = i % 100;
            if (j == 1 && k != 11) return i + 'st';
            if (j == 2 && k != 12) return i + 'nd';
            if (j == 3 && k != 13) return i + 'rd';
            return i + 'th';
          };
  
          const labelDivWrapper = document.createElement('div');
          labelDivWrapper.classList.add('form-insurance__label-wrapper');
  
          const labelTitleDiv = document.createElement('div');
          labelTitleDiv.classList.add('form-insurance__label-title');
  
          const spanIndex = document.createElement('span');
          spanIndex.textContent = getOrdinalSuffix(index + 1);
          spanIndex.classList.add('form-insurance__label-index');
  
          const spanLabel = document.createElement('span');
          spanLabel.textContent = label;
  
          labelTitleDiv.appendChild(spanIndex);
          labelTitleDiv.appendChild(spanLabel);
          labelDivWrapper.appendChild(labelTitleDiv);
  
          if (fromAdd || index >= 2) {
            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.textContent = 'Remove';
            removeBtn.classList.add('insurance-form__remove-form');
  
            removeBtn.addEventListener('click', () => {
              formElement.remove();
              labelDivWrapper.remove();
  
              const currentForms = formsContainer.querySelectorAll('.form-family');
              if (currentForms.length < 4) {
                addTravelerButtonWrapper.style.display = 'inline-block';
                const lastForm = currentForms[currentForms.length - 1];
                const lastFormRight = lastForm.querySelector('.form-insurance__right');
                if (lastFormRight) {
                  lastFormRight.appendChild(addTravelerButtonWrapper);
                }
              }
            });
  
            const removeWrapper = document.createElement('div');
            removeWrapper.classList.add('form-insurance__button-wrapper');
            removeWrapper.appendChild(removeBtn);
            labelDivWrapper.appendChild(removeWrapper);
          }
  
          wrapper.appendChild(labelDivWrapper);
          wrapper.appendChild(formElement);
  
          const formTemplateElement = document.getElementById('form-insurance-template');
          formElement.innerHTML = formTemplateElement.innerHTML;
  
          // Update label dinamis berdasarkan radio Relationship
          const relationshipWrapper = formElement.querySelector('.form-insurance__wrapper.relationship-wrapper');
          if (relationshipWrapper) {
            const spouseRadio = relationshipWrapper.querySelector('#relationship-spouse');
            const childRadio = relationshipWrapper.querySelector('#relationship-child');
  
            spouseRadio.checked = false;
            childRadio.checked = false;
  
            spouseRadio.addEventListener('change', () => {
              spanLabel.textContent = 'Traveler (Spouse)';
            });
  
            childRadio.addEventListener('change', () => {
              spanLabel.textContent = 'Traveler (Child)';
            });
          }
  
          // Hapus field sesuai posisi form
          const toRemoveFields = [];
  
          if (!fromAdd && index === 0) {
            toRemoveFields.push('.relationship-wrapper');
          } else if (!fromAdd && index === 1) {
            toRemoveFields.push(
              'input[name="Mobile Phone"]',
              'input[name="Email"]',
              'input[name="Additional Email"]',
              'input[name="City"]',
              'input[name="Postal Code"]',
              'textarea[name="Address"]'
            );
          } else {
            toRemoveFields.push(
              'input[name="Mobile Phone"]',
              'input[name="Email"]',
              'input[name="Additional Email"]',
              'input[name="City"]',
              'input[name="Postal Code"]',
              'textarea[name="Address"]',
              '.relationship-wrapper'
            );
          }
  
          toRemoveFields.forEach((selector) => {
            const el = formElement.querySelector(selector);
            if (el) {
              const fieldWrapper = el.closest('.form-insurance__field') || el;
              fieldWrapper.remove();
            }
          });
  
          return wrapper;
        };
  
        // Tambah 2 form default
        formsContainer.appendChild(createForm(false, product));
        formsContainer.appendChild(createForm(false, product));
  
        // Add Traveler Button
        const addTravelerButtonWrapper = document.createElement('div');
        addTravelerButtonWrapper.classList.add('add-traveler__button');
  
        const addTravelerButton = document.createElement('button');
        addTravelerButton.type = 'button';
        addTravelerButton.classList.add('insurance-form__add-form');
        addTravelerButton.textContent = 'Add Traveler';
  
        addTravelerButtonWrapper.appendChild(addTravelerButton);
  
        addTravelerButton.addEventListener('click', () => {
          const currentForms = formsContainer.querySelectorAll('.form-family').length;
          if (currentForms < 4) {
            const newForm = createForm(true, product);
            formsContainer.appendChild(newForm);
  
            const newFormRight = newForm.querySelector('.form-insurance__right');
            if (newFormRight) {
              newFormRight.appendChild(addTravelerButtonWrapper);
            }
  
            if (formsContainer.querySelectorAll('.form-family').length >= 4) {
              addTravelerButtonWrapper.style.display = 'none';
            }
          }
        });
  
        const secondForm = formsContainer.querySelectorAll('.form-family')[1];
        const secondFormRight = secondForm.querySelector('.form-insurance__right');
        if (secondFormRight) {
          secondFormRight.appendChild(addTravelerButtonWrapper);
        }
  
        formWrapper.appendChild(formsContainer);
        familyContainer.appendChild(formWrapper);
      }
    });
  } else {
    console.log('No ProductItems found in sessionStorage');
  }
</script>

<script>
  function customizeInsuranceForms() {
    // --- INDIVIDUAL SECTION ---
    const individualForms = document.querySelectorAll('#form-individual form');
    individualForms.forEach((form) => {
      const relationshipField = form.querySelector('.relationship-wrapper');
      if (relationshipField) {
        relationshipField.remove();
      }
    });
  
    // --- DUOPLUS SECTION ---
    const duoplusForms = document.querySelectorAll('#form-duoplus form');
    duoplusForms.forEach((form, index) => {
      // Hapus Relationship untuk semua
      const relationshipField = form.querySelector('.relationship-wrapper');
      if (relationshipField) {
        relationshipField.remove();
      }
  
      // Untuk form ke-2 dan seterusnya (index > 0), hapus field tambahan
      if (index > 0) {
        const toRemove = [
          'input[name="Mobile Phone"]',
          'input[name="Email"]',
          'input[name="Additional Email"]',
          'input[name="City"]',
          'input[name="Postal Code"]',
          'textarea[name="Address"]',
        ];
        toRemove.forEach((selector) => {
          const el = form.querySelector(selector);
          if (el) {
            const wrapper = el.closest('.form-insurance__field');
            if (wrapper) wrapper.remove();
          }
        });
      }
    });
  
    // --- FAMILY SECTION ---
    const familySections = document.querySelectorAll('[data-section-id^="form-family"]');
  
    familySections.forEach((section) => {
      const forms = section.querySelectorAll('form');
  
      forms.forEach((form, index) => {
        // Urutan pertama: hapus relationship saja
        if (index === 0) {
          const rel = form.querySelector('.relationship-wrapper');
          if (rel) rel.remove();
        }
  
        // Urutan kedua: hapus sebagian field
        if (index === 1) {
          const toRemove = [
            'input[name="Mobile Phone"]',
            'input[name="Email"]',
            'input[name="Additional Email"]',
            'input[name="City"]',
            'input[name="Postal Code"]',
            'textarea[name="Address"]',
          ];
          toRemove.forEach((selector) => {
            const el = form.querySelector(selector);
            if (el) {
              const wrapper = el.closest('.form-insurance__field');
              if (wrapper) wrapper.remove();
            }
          });
        }
  
        // Urutan ketiga dan seterusnya: hapus semua seperti urutan 2 + relationship
        if (index >= 2) {
          const toRemove = [
            'input[name="Mobile Phone"]',
            'input[name="Email"]',
            'input[name="Additional Email"]',
            'input[name="City"]',
            'input[name="Postal Code"]',
            'textarea[name="Address"]',
            '.relationship-wrapper',
          ];
          toRemove.forEach((selector) => {
            const el = form.querySelector(selector);
            if (el) {
              const wrapper = el.closest('.form-insurance__field') || el;
              wrapper.remove();
            }
          });
        }
      });
    });
  }
  
  // Jalankan setelah render form selesai
  window.addEventListener('DOMContentLoaded', () => {
    customizeInsuranceForms();
  });
</script>

<script>
  async function handleCheckout() {
    const isDataCorrectChecked = document.getElementById('check-data-global').checked;
    const isItineraryChecked = document.getElementById('check-itinerary-global').checked;
  
    if (!isDataCorrectChecked || !isItineraryChecked) {
      alert('You must confirm that the data is correct and the flight itinerary is the same.');
      return;
    }
  
    const ProductItems = JSON.parse(sessionStorage.getItem('ProductItems')) || [];
    const insuranceItems = ProductItems.filter((p) => p.category === 'Insurance');
  
    if (insuranceItems.length === 0) {
      alert('No insurance product selected.');
      return;
    }
  
    // Fungsi collectFormData dengan parameter formsPerSection
    const collectFormData = (formList, section, formsPerSection) => {
      return Array.from(formList).map((form, index) => {
        const relativeIndex = index % formsPerSection;
        const data = new FormData(form);
        let title = '';
  
        if (section === 'Individual') {
          if (relativeIndex === 0) title = 'Insured (Policy Holder)';
          else title = 'Traveler'; // sesuaikan jika perlu
        } else if (section === 'DuoPlus') {
          title = relativeIndex === 0 ? 'Insured (Policy Holder)' : 'Traveler';
        } else if (section === 'Family') {
          if (relativeIndex === 0) title = 'Insured (Policy Holder)';
          else if (relativeIndex === 1) title = 'Traveler';
          else title = 'Traveler (Child)';
        }
  
        return {
          title,
          salutation: data.get('Salutation'),
          firstName: data.get('First Name'),
          lastName: data.get('Last Name'),
          placeOfBirth: data.get('Place Of Birth'),
          day: data.get('Day'),
          month: data.get('Month'),
          year: data.get('Year'),
          passportNumber: data.get('Passport Number'),
          mobilePhone: data.get('Mobile Phone'),
          email: data.get('Email'),
          city: data.get('City'),
          postalCode: data.get('Postal Code'),
          address: data.get('Address'),
          relationship: data.get('Relationship'),
        };
      });
    };
  
    // Format data dengan nomor insured per section Family
    const formatData = (dataArray, insuredIndex = null) => {
      let insuredNumberApplied = false;
      return dataArray
        .map((item) => {
          const lines = [];
  
          let title = item.title;
  
          if (title === 'Insured (Policy Holder)' && insuredIndex !== null && !insuredNumberApplied) {
            title = `${title} #Insured ${insuredIndex + 1}`;
            insuredNumberApplied = true;
          } else if (title === 'Traveler' || title === 'Traveler (Child)') {
            if (item.relationship === 'Spouse') {
              title = 'Traveler (Spouse)';
            } else if (item.relationship === 'Child') {
              title = 'Traveler (Child)';
            }
          }
  
          if (title) lines.push(title);
          lines.push(`Full Name: ${[item.salutation, item.firstName, item.lastName].filter(Boolean).join(' ')}`);
          lines.push(
            `Place Of Birth: ${item.placeOfBirth} - ${[item.day, item.month, item.year].filter(Boolean).join('-')}`
          );
          if (item.passportNumber) lines.push(`passport Number: ${item.passportNumber}`);
          if (item.mobilePhone) lines.push(`Mobile Phone: ${item.mobilePhone}`);
          if (item.email) lines.push(`Email: ${item.email}`);
          if (item.city || item.postalCode)
            lines.push(`City: ${[item.city, item.postalCode].filter(Boolean).join(' ')}`);
          if (item.address) lines.push(`Address: ${item.address}`);
          return lines.join('\n');
        })
        .join('\n\n');
    };
  
    const attributes = {};
  
    // INDIVIDUAL
    const individualForms = document.querySelectorAll('#form-individual form');
    if (individualForms.length > 0) {
      const data = collectFormData(individualForms, 'Individual', individualForms.length);
      attributes['Form Individual'] = formatData(data);
    }
  
    // DUOPLUS
    const duoForms = document.querySelectorAll('#form-duoplus form');
    if (duoForms.length > 0) {
      const data = collectFormData(duoForms, 'DuoPlus', duoForms.length);
      attributes['Form DuoPlus'] = formatData(data);
    }
  
    // FAMILY
    const familySections = document.querySelectorAll('[data-section-id^="form-family"]');
    if (familySections.length > 0) {
      let fullFamilyText = '';
  
      familySections.forEach((section, index) => {
        const groupForms = section.querySelectorAll('form.form-family');
        const data = collectFormData(groupForms, 'Family', groupForms.length);
        const formatted = formatData(data, index);
        fullFamilyText += (index > 0 ? '\n\n' : '') + formatted;
      });
  
      attributes['Form Family'] = fullFamilyText;
    }
  
    // Jika hanya 1 produk, redirect via URL
    if (ProductItems.length === 1) {
      const product = ProductItems[0];
      let queryData = {};
  
      if (product.variantType === 'Family') {
        queryData = { 'Form Family': attributes['Form Family'] };
      } else if (attributes[`Form ${product.variantType}`]) {
        queryData = { [`Form ${product.variantType}`]: attributes[`Form ${product.variantType}`] };
      }
  
      const queryParams = Object.entries(queryData)
        .map(([key, val]) => `attributes[${encodeURIComponent(key)}]=${encodeURIComponent(val)}`)
        .join('&');
  
      const checkoutUrl = `/cart/${product.variantId}:${product.quantity}?${queryParams}`;
      window.location.href = checkoutUrl;
      return;
    }
  
    // Jika >1 produk, fetch clear + add
    try {
      await fetch('/cart/clear.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
  
      for (const product of ProductItems) {
        let key = '';
        if (product.variantType === 'Individual') key = 'Form Individual';
        else if (product.variantType === 'DuoPlus') key = 'Form DuoPlus';
  
        let itemAttributes = {};
  
        if (product.category === 'Insurance') {
          if (product.variantType === 'Family') {
            itemAttributes = { 'Form Family': attributes['Form Family'] };
          } else if (attributes[key]) {
            itemAttributes = { [key]: attributes[key] };
          }
        }
  
        console.log('🛒 Adding to cart:', {
          id: product.variantId,
          quantity: product.quantity,
          attributes: itemAttributes,
        });
  
        await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: product.variantId,
            quantity: product.quantity,
            attributes: itemAttributes,
          }),
        });
      }
  
      window.location.href = '/checkout';
    } catch (error) {
      console.error('Checkout error:', error);
      alert('There was an error during checkout. Please try again.');
    }
  }
</script>

{% schema %}
  {
    "name": "form insurance",
    "settings": [],
    "presets": [
      {
        "name": "form insurance",
        "category": "Custom"
      }
    ]
  }
{% endschema %}