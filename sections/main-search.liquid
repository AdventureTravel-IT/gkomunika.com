{% comment %}
  Improved and validated Shopify section with SIM Type filter buttons
  Fix: Heading collection hanya muncul kalau produk ada
{% endcomment %}

{% comment %} # STYLES SECTION {% endcomment %}
{% style %}
  /* (Styles as you provided, plus filter buttons styles) */
  .main-search {
    max-width: 1920px;
    margin: 0 auto;
  }
  .main-search-container {
    background-color: var(--color-background);
    padding: 20px 10% 90px;
  }

  .sim-filter-buttons {
    margin-bottom: 20px;
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
  }

  .sim-filter-buttons button {
    padding: 8px 20px;
    background: transparent;
    color: var(--color-primary);
    border: none;
    border-radius: 15px;
    font-weight: bold;
    font-size: 14px;
    cursor: pointer;
    transition: transform 0.3s ease;
  }
  .sim-filter-buttons button.active,
  .sim-filter-buttons button:hover {
    color: var(--color-neutral);
    background-color: var(--color-primary);
  }

  /* Keep your original styles unchanged below */
  .main-search-collection-wrapper {
    margin-bottom: 30px;
  }
  .main-search-collection {
    margin-top: 20px;
  }
  .main-search-collection.title {
    margin: 0 0 10px;
    font-weight: bold;
    color: var(--color-primary);
    font-size: 26px;
  }
  .product-card-wrapper {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
    width: 100%;
    height: 100%;
  }
  .product-card-container {
    display: flex;
    gap: 10px;
    flex-direction: column;
    padding: 15px;
    background-color: white;
    border-radius: 25px;
    box-shadow: var(--box-shadow);
  }
  .product-card-country {
    display: flex;
    gap: 10px;
    align-items: center;
    justify-content: flex-start;
    width: 100%;
    min-height: 53px;
  }
  .product-card-country h1 {
    margin: 0;
    color: var(--color-primary);
    font-size: 20px;
    font-weight: bold;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .product-card-icon-single-flag {
    border-radius: 15px;
    border: 1px solid var(--color-border);
  }
  .product-card-multi-flag,
  .product-card-icon-multi-flag {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 3px;
    border-radius: 5px;
  }
  .product-card-icon-multi-flag {
    border: 1px solid var(--color-border);
  }
  .product-card-flag-count {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 25px;
    height: 25px;
    border: 1px solid var(--color-border);
    border-radius: 5px;
    color: var(--color-primary);
    background-color: white;
  }
  .product-card-flag-count span {
    font-size: 10px;
    font-weight: bold;
    color: var(--color-primary);
  }
  .product-url-link {
    text-decoration: none;
    color: var(--color-primary);
    display: flex;
    align-items: center;
  }
  .product-card-field-icons {
    display: flex;
    gap: 10px;
    align-items: center;
    justify-content: center;
  }
  .product-card-field-icons h1 {
    font-size: 18px;
    font-weight: bold;
    color: var(--color-primary);
  }
  .product-card-field-icons h2 {
    word-break: break-word;
    -webkit-line-clamp: 2;
  }
  .product-card-field {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top: 1px ridge;
    padding: 5px 0;
  }
  img.field-icon {
    width: 30px;
    height: 30px;
  }
  .product-card-field h2 {
    font-size: 16px;
    font-weight: bold;
    color: var(--color-secondary);
  }
  .product-card-btn {
    width: 100%;
    height: 55px;
    background-color: var(--color-primary);
    border: none;
    border-radius: 15px;
    cursor: pointer;
  }
  .product-card-btn p {
    font-size: var(--font-large);
    font-weight: bold;
    color: var(--color-neutral);
    margin: 0;
  }
  .product-card-content {
    position: relative;
    width: 100%;
    height: 100%;
    margin-bottom: 10px;
    transform-style: preserve-3d;
    transition: transform 0.6s ease-in-out;
  }
  .product-card-container .product-card-content {
    transform: rotateY(0deg);
  }
  .product-card-container.flipped .product-card-content {
    transform: rotateY(180deg);
  }
  .product-card-content-flip-front,
  .product-card-content-flip-back {
    backface-visibility: hidden;
    transition: transform 0.6s ease-in-out;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    gap: 7px;
  }
  .product-card-content-flip-back {
    position: absolute;
    top: 0;
    left: 0;
    overflow-y: hidden; /* default: tidak bisa scroll */
    background: var(--color-neutral);
    text-align: center;
    cursor: pointer;
    transform: rotateY(180deg);
  }

  .product-card-container.flipped .product-card-content-flip-back {
    overflow-y: auto; /* aktifkan scroll hanya ketika flipped */
  }

  .country-total-atribut-wrapper {
    max-width: 100%;
    padding: 2px 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
  .country-total-atribut span {
    font-size: 12px;
    font-weight: bold;
    color: var(--color-secondary);
  }
  .country-total-atribut button {
    width: 100%;
    padding: 10px;
    cursor: pointer;
    border-radius: 10px;
    border: 1px solid var(--color-primary);
    background: none;
  }
  .country-total-including-atribut {
    background-color: var(--color-primary);
    text-align: center;
    border-radius: 5px;
  }
  .country-total-including-atribut p {
    margin: 5px;
    font-size: 12px;
    font-weight: bold;
    color: var(--color-neutral);
  }
  .main-search__product-type {
    background-color: var(--color-primary);
    border-radius: 5px;
    padding: 5px;
    color: var(--color-neutral);
    font-size: 12px;
    margin: 0;
    font-weight: bold;
  }
  .main-search__error {
    display: flex;
    justify-content: center;
    border-radius: 15px;
    padding: 15px;
  }
  .main-search__error p {
    font-size: var(--font-supper-large);
    color: var(--color-primary);
  }
  @media (max-width: 1600px) {
    .product-card-wrapper {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  @media (max-width: 1024px) {
    .product-card-wrapper {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (max-width: 768px) {
    .main-search-container {
      padding: 20px 10%;
    }
    .banner-search__content {
      width: 100%;
    }
    .product-card-wrapper {
      grid-template-columns: repeat(1, 1fr);
    }
  }
  @media (max-width: 426px) {
    .product-card-wrapper {
      grid-template-columns: repeat(1, 1fr);
    }
    .main-search-container {
      padding: 20px 24px;
    }
  }
{% endstyle %}

{% comment %} # JAVASCRIPT SECTION {% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Flip card functionality (existing)
    document.querySelectorAll('.flipped-trigger').forEach(function (button) {
      button.addEventListener('click', function (event) {
        event.stopPropagation();
        let card = this.closest('.product-card-container');
        card.classList.toggle('flipped');
      });
    });
    document.addEventListener('click', function (event) {
      document.querySelectorAll('.product-card-container.flipped').forEach(function (card) {
        if (!card.contains(event.target) || event.target.closest('.product-card-content-flip-back')) {
          card.classList.remove('flipped');
        }
      });
    });

    // SIM Type Filter buttons
    const filterButtonsContainer = document.querySelector('.sim-filter-buttons');
    if (!filterButtonsContainer) return;

    const buttons = filterButtonsContainer.querySelectorAll('button');
    const collectionWrappers = document.querySelectorAll('.main-search-collection-wrapper');

    buttons.forEach((button) => {
      button.addEventListener('click', () => {
        buttons.forEach((btn) => btn.classList.remove('active'));
        button.classList.add('active');

        const filter = button.getAttribute('data-filter');

        // Show/hide products
        document.querySelectorAll('.product-card-container').forEach((productCard) => {
          if (filter === 'all') {
            productCard.style.display = 'flex';
          } else {
            if (productCard.classList.contains('sim-type-' + filter)) {
              productCard.style.display = 'flex';
            } else {
              productCard.style.display = 'none';
            }
          }
        });

        // Show/hide collection wrappers based on visible products inside them
        collectionWrappers.forEach((wrapper) => {
          const products = wrapper.querySelectorAll('.product-card-container');
          const anyVisible = Array.from(products).some((p) => p.style.display !== 'none');
          wrapper.style.display = anyVisible ? 'block' : 'none';
        });
      });
    });
  });
</script>

{% comment %} # TEMPLATE SECTION {% endcomment %}
<div class="main-search">
  <div class="main-search-container">
    {% assign search_term = search.terms | downcase | strip %}
    {% assign collections_to_check = 'single_country_collection,multi_country_collection,global_country_collection'
      | split: ','
    %}
    {% assign found_any_product = false %}
    {% assign single_product_url = '' %}
    {% assign product_count = 0 %}

    {%- comment -%} Loop pertama: kumpulkan semua tipe SIM unik dari produk hasil pencarian {%- endcomment -%}
    {% assign sim_types = '' %}

    {% for collection_key in collections_to_check %}
      {% assign collection = collections[section.settings[collection_key]] %}
      {% if collection %}
        {% for product in collection.products %}
          {% assign product_alias = product.metafields.coverage.alias | downcase | strip %}
          {% assign product_alias_2 = product.metafields.coverage.alias_2 | downcase | strip %}
          {% assign product_title = product.title | downcase | strip %}
          {% assign product_countries = product.metafields.coverage.country.value %}
          {% assign product_countries_2 = product.metafields.coverage.country_2.value %}
          {% assign product_category = product.metafields.product.category.value | default: 'Undefined' %}
          {% assign matched_countries = '' %}
          {% assign matched_countries_2 = '' %}

          {% assign match_region = false %}
          {% assign product_regions = product.metafields.coverage.region.value %}
          {% if product_regions %}
            {% for region in product_regions %}
              {% assign region_clean = region | downcase | strip %}
              {% if region_clean == search_term %}
                {% assign match_region = true %}
              {% endif %}
            {% endfor %}
          {% endif %}

          {% if collection_key == 'global_country_collection' or collection_key == 'multi_country_collection' %}
            {% for country in product_countries %}
              {% assign country_downcase = country | downcase | strip %}
              {% if country_downcase contains search_term %}
                {% assign matched_countries = matched_countries | append: country | append: ', ' %}
              {% endif %}
            {% endfor %}
            {% if product_countries_2 %}
              {% for country2 in product_countries_2 %}
                {% assign country2_downcase = country2 | downcase | strip %}
                {% if country2_downcase contains search_term %}
                  {% assign matched_countries_2 = matched_countries_2 | append: country2 | append: ', ' %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endif %}

          {% if product_alias contains search_term
            or product_alias_2 contains search_term
            or product_title contains search_term
            or matched_countries != ''
            or matched_countries_2 != ''
            or match_region
          %}
            {% assign found_any_product = true %}
            {% unless sim_types contains product_category %}
              {% assign sim_types = sim_types | append: product_category | append: ',' %}
            {% endunless %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endfor %}

    {% assign sim_types_array = sim_types | split: ',' %}

    {%- comment -%} Render filter buttons {%- endcomment -%}
    <div class="sim-filter-buttons">
      <button class="filter-btn active" data-filter="all">All</button>

      {% assign sim_types_array_sorted = sim_types_array | sort %}

      {% for sim_type in sim_types_array_sorted %}
        {% assign sim_type_trim = sim_type | strip %}
        {% if sim_type_trim != '' and sim_type_trim != 'Undefined' %}
          {% if sim_type_trim != 'Insurance' %}
            <button
              class="filter-btn"
              data-filter="{{ sim_type_trim | replace: '_', ' ' | downcase | replace: ' ', '-' }}"
            >
              {{ sim_type_trim | replace: '_', ' ' }}
            </button>
          {% endif %}
        {% endif %}
      {% endfor %}

      <!-- Now add the "Insurance" button at the end -->
      {% for sim_type in sim_types_array_sorted %}
        {% if sim_type == 'Insurance' %}
          <button class="filter-btn" data-filter="{{ sim_type | replace: '_', ' ' | downcase | replace: ' ', '-' }}">
            {{ sim_type | replace: '_', ' ' }}
          </button>
        {% endif %}
      {% endfor %}
    </div>

    {%- comment -%} Loop kedua: render produk dan heading collection hanya jika ada produk {%- endcomment -%}
    {% for collection_key in collections_to_check %}
      {% assign collection = collections[section.settings[collection_key]] %}
      {% assign found_product = false %}
      {% assign product_output = '' %}

      {% if collection %}
        {% for product in collection.products %}
          {% assign product_alias = product.metafields.coverage.alias | downcase | strip %}
          {% assign product_alias_2 = product.metafields.coverage.alias_2 | downcase | strip %}
          {% assign product_title = product.title | downcase | strip %}
          {% assign product_countries = product.metafields.coverage.country.value %}
          {% assign product_countries_2 = product.metafields.coverage.country_2.value %}
          {% assign product_category = product.metafields.product.category.value | default: 'Undefined' %}
          {% assign matched_countries = '' %}
          {% assign matched_countries_2 = '' %}

          {% assign match_region = false %}
          {% assign product_regions = product.metafields.coverage.region.value %}
          {% if product_regions %}
            {% for region in product_regions %}
              {% assign region_clean = region | downcase | strip %}
              {% if region_clean == search_term %}
                {% assign match_region = true %}
              {% endif %}
            {% endfor %}
          {% endif %}

          {% if collection_key == 'global_country_collection' or collection_key == 'multi_country_collection' %}
            {% for country in product_countries %}
              {% assign country_downcase = country | downcase | strip %}
              {% if country_downcase contains search_term %}
                {% assign matched_countries = matched_countries | append: country | append: ', ' %}
              {% endif %}
            {% endfor %}
            {% if product_countries_2 %}
              {% for country2 in product_countries_2 %}
                {% assign country2_downcase = country2 | downcase | strip %}
                {% if country2_downcase contains search_term %}
                  {% assign matched_countries_2 = matched_countries_2 | append: country2 | append: ', ' %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endif %}

          {% if product_alias contains search_term
            or product_alias_2 contains search_term
            or product_title contains search_term
            or matched_countries != ''
            or matched_countries_2 != ''
            or match_region
          %}
            {% assign found_product = true %}
            {% assign found_any_product = true %}
            {% assign product_count = product_count | plus: 1 %}
            {% assign single_product_url = product.url %}

            {% assign all_matched_countries = matched_countries | append: matched_countries_2 %}

            {% capture product_card %}
<div class="product-card-container sim-type-{{ product_category | replace: '_', ' ' | downcase | replace: ' ', '-' }}">
  <a class="product-url-link" href="{{ product.url }}">
    <div class="product-card-country">
      {% assign total_countries = product_countries.size %}
      {% if total_countries == 1 %}
        {% assign country_trimmed = product_countries.first | strip %}
        {% assign country_filename = country_trimmed | replace: ' ', '-' | append: '.svg' %}
        <img class="product-card-icon-single-flag" src="{{ country_filename | file_url }}" alt="{{ country_trimmed }}" width="50" height="50">
      {% else %}
        <div class="product-card-multi-flag">
          {% for country in product_countries limit: 3 %}
            {% assign country_parts = country | split: '_' %}
            {% assign country_processed = country_parts | join: '_' | replace: ' ', '-' %}
            {% assign country_filename = country_processed | append: '.svg' %}
            <img class="product-card-icon-multi-flag" src="{{ country_filename | file_url }}" alt="{{ country_processed }}" width="25" height="25">
          {% endfor %}
          {% if total_countries > 3 %}
            <div class="product-card-flag-count"><span>+{{ total_countries | minus: 3 }}</span></div>
          {% endif %}
        </div>
      {% endif %}
      <div class="main-search__product">
        {% if product_category == "Insurance" %}
          <span class="main-search__product-type">Insurance</span>
        {% else %}
          <span class="main-search__product-type" {% if product_category == "SIM_Card" %}style="background-color: var(--color-secondary);" {% endif %}>
            SIM Type: {{ product_category | replace: '_', ' ' }}
          </span>
        {% endif %}
        <h1>{{ product.title }}</h1>
      </div>
    </div>
  </a>

  <div class="product-card-content">
    <div class="product-card-content-flip-front">
      {% if product_countries.size > 1 %}
      <div class="product-card-field" style="border-top: 1px ridge;">
        <div class="product-card-field-icons">
          <img class="field-icon" src="{{ 'icon-park-outline_world.svg' | asset_url }}" alt="Icon">
          <h1>Coverage</h1>
        </div>
        <div class="country-total-atribut-wrapper">
          <div class="country-total-atribut">
            <button class="flipped-trigger"><span>{{ product_countries.size }} Countries</span></button>
          </div>
          {% assign alias_array = alias_string | split: ',' | uniq %}
          {% if alias_array.size > 0 %}
            <div class="country-total-including-atribut hidden">
              <p>Including {{ alias_array | join: ', ' }}</p>
            </div>
          {% endif %}
        </div>
      </div>
      {% endif %}

      {% if product.variants.size > 0 %}
        {% assign first_optiondays = product.variants.first.option1 | replace: ' Days', '' %}
        {% assign last_optiondays = product.variants.last.option1 | strip %}
        {% assign last_optionquota = product.variants.last.option2 | strip %}

        {% unless product_category == 'Insurance' %}
        <div class="product-card-field">
          <div class="product-card-field-icons">
            <img class="field-icon" src="{{ 'icon-tabler_mobiledata.svg' | asset_url }}" alt="Icon">
            <h1>Data</h1>
          </div>
          <h2>{{ last_optionquota }}</h2>
        </div>
        {% endunless %}

        <div class="product-card-field">
          <div class="product-card-field-icons">
            <img class="field-icon" src="{{ 'icon-date-range.svg' | asset_url }}" alt="Icon">
            <h1>Days</h1>
          </div>
          {% if product.metafields.product.category.value == "Insurance" %}
            <h2>Up to 31 Days</h2>
          {% else %}
            <h2>{{ first_optiondays }} - {{ last_optiondays }}</h2>
          {% endif %}
        </div>

        <div class="product-card-field">
          <div class="product-card-field-icons">
            <img class="field-icon" src="{{ 'icon-dollar.svg' | asset_url }}" alt="Icon">
            <h1>Price</h1>
          </div>
          <h2>From {{ product.price | money_with_currency }}</h2>
        </div>
      {% endif %}
    </div>
    <div class="product-card-content-flip-back">
      {% render 'coverage', product: product %}
    </div>
  </div>

  <div class="product-card-button">
    <a class="product-url-link" href="{{ product.url }}">
      <button class="product-card-btn">
        <p> See Product Details</p>
      </button>
    </a>
  </div>
</div>
{% endcapture %}

            {% assign product_output = product_output | append: product_card %}
          {% endif %}
        {% endfor %}

        {% if found_product %}
          <div class="main-search-collection-wrapper" id="collection-{{ collection_key }}">
            <h1 class="main-search-collection title">{{ collection.title }}</h1>
            <div class="main-search-collection">
              <div class="product-card-wrapper" id="{{ collection_key }}">
                {{ product_output }}
              </div>
            </div>
          </div>
        {% endif %}
      {% endif %}
    {% endfor %}

    {% unless found_any_product %}
      <div class="main-search__error">
        <p>No products found for "{{ search.terms }}"</p>
      </div>
    {% endunless %}

    {% if product_count == 1 %}
      <script>
        window.location.href = '{{ single_product_url }}';
      </script>
    {% endif %}
  </div>
</div>

{% comment %} # SCHEMA SECTION {% endcomment %}
{% schema %}
{
  "name": "Main Search",
  "settings": [
    {
      "type": "text",
      "label": "Single Country Title",
      "id": "title_single",
      "default": "Single Country"
    },
    {
      "type": "collection",
      "label": "Single Country Collection",
      "id": "single_country_collection"
    },
    {
      "type": "text",
      "label": "Multi Country Title",
      "id": "title_multi",
      "default": "Multi Country"
    },
    {
      "type": "collection",
      "label": "Multi Country Collection",
      "id": "multi_country_collection"
    },
    {
      "type": "text",
      "label": "Global Country Title",
      "id": "title_global",
      "default": "Global Country"
    },
    {
      "type": "collection",
      "label": "Global Country Collection",
      "id": "global_country_collection"
    }
  ]
}
{% endschema %}
