<div class="search-container">
  <form action="{{ routes.search_url }}" method="get" class="search-form" onsubmit="return false;">
    <div class="search-box">
      <input
        class="search-fields"
        id="search-input"
        type="search"
        name="q"
        value="{{ search.terms | escape }}"
        oninput="filterCountries()"
        placeholder="{{ 'general.search.search' | t }}"
        aria-label="Search"
      >
    </div>
  </form>
  <div id="search-empty" class="search-empty" style="display:none;" role="status" aria-live="polite">
  Country not found.
</div>

</div>

<script>
const searchInput = document.getElementById('search-input');
const emptyMsg = document.getElementById('search-empty');

// Normalisasi teks: lowercase, hilangin aksen, underscore -> spasi
function norm(s = '') {
  return s
    .toLowerCase()
    .replace(/_/g,' ')
    .normalize('NFD')
    .replace(/\p{Diacritic}/gu, '');
}

// subsequence ketat: dipakai HANYA utk query konsonan (mis. "chn")
function isSubsequence(q, t) {
  let i = 0;
  for (const ch of t) if (ch === q[i]) i++;
  return q.length > 0 && i === q.length;
}

function isConsonantOnly(s) {
  return /^[^aeiou\s]+$/i.test(s); // tidak mengandung a e i o u
}

function tokenStartsWith(hay, needle) {
  const tokens = hay.split(/[^a-z]+/); // pecah per non-huruf
  return tokens.some(tok => tok.startsWith(needle));
}

function matchScore(haystackRaw, needleRaw) {
  if (!needleRaw) return 1; // kosong = tampilkan semua

  const hay = norm(haystackRaw);
  const q   = norm(needleRaw);

  if (!q) return 0;

  // Skor prioritas: exact > prefix kata > judul mengandung > subsequence (konsonan-only)
  if (hay === q) return 100;

  if (tokenStartsWith(hay, q)) return 90;

  if (hay.includes(q)) return 70;

  if (q.length >= 3 && isConsonantOnly(q) && isSubsequence(q, hay)) return 40;

  return 0;
}

function filterCountries() {
  const input = (searchInput.value || '').trim();
  const items = Array.from(document.querySelectorAll('#coverage-container .coverage-item'));
  let found = 0;

  // Hitung skor per item
  const scored = items.map(item => {
    const byAttr = item.getAttribute('data-country') || '';
    const byRaw  = item.getAttribute('data-country-raw') || '';
    const byText = item.textContent || '';
    const hay = `${byAttr} ${byRaw} ${byText}`;

    const score = matchScore(hay, input);
    item.dataset.score = String(score);
    return { item, score };
  });

  // Tampilkan/sembunyikan
  scored.forEach(({ item, score }) => {
    const show = score > 0 || (input === '');
    item.style.display = show ? '' : 'none';
    if (show) found++;
  });

  // Urutkan DOM berdasarkan skor (desc) lalu alfabet
  const container = document.getElementById('coverage-container');
  const visible = scored
    .filter(({ item }) => item.style.display !== 'none')
    .sort((a, b) => {
      if (b.score !== a.score) return b.score - a.score;
      // tie-break: urut alfabet by text
      const at = (a.item.textContent || '').trim().toLowerCase();
      const bt = (b.item.textContent || '').trim().toLowerCase();
      return at.localeCompare(bt);
    });

  // Re-append urutan baru (yang visible saja; hidden dibiarkan di posisi lama)
  visible.forEach(({ item }) => container.appendChild(item));

  // pesan kosong
  emptyMsg.style.display = (input && found === 0) ? 'block' : 'none';
}

// ekspos ke global supaya bisa dipanggil ulang
window.filterCountries = filterCountries;
</script>


<style>
  input[type="search"]::-webkit-search-cancel-button { display: none; }
  .search-container, .search-form { display:flex; flex-direction:column; align-items:center; width:100%; }
  .search-box { position:relative; width:100%; height:60px; }
  .search-fields { width:100%; height:100%; padding:0 10px; font-size:16px; border:1px solid var(--color-primary); border-radius:15px; outline:none; color:var(--color-primary); }
  .search-fields:focus { border-color:var(--color-primary); color:var(--color-primary); font-size:var(--font-large); }
  .search-fields::placeholder { color:var(--color-primary); }

  .search-empty {
    width:100%;
    margin-top:8px;
    padding:10px;
    border:1px dashed var(--color-primary);
    border-radius:8px;
    color:var(--color-primary);
    background:transparent;
  }
</style>
