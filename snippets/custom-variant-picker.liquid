<style>
    .quantity-input {
      display: inline-flex;
      align-items: center;
      border: 1px solid var(--color-primary);
      border-radius: 24px;
      overflow: hidden;
      width: fit-content;
      padding: 5px;
    }

    .quantity-wrapper {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .quantity-btn {
      background-color: transparent;
      border: none;
      padding: 8px 12px;
      font-size: 16px;
      color: var(--color-primary);
      cursor: pointer;
      user-select: none;
    }

    .quantity-number {
      width: 40px;
      text-align: center;
      border: none;
      font-size: 16px;
      outline: none;
      color: var(--color-primary);
    }

    .quantity-btn:disabled {
      color: var(--color-primary);
      cursor: not-allowed;
    }

    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    input[type="number"] {
      -moz-appearance: textfield;
    }

    .quantity-btn:disabled {
      cursor: not-allowed;
      opacity: 0.4;
    }

    .disabled-option {
      color: #bbb;
    }

    .variant-option__wrapper {
      display: flex;
      gap: 10px;
      width: 100%;
    }
    .variant-option {
      display: flex;

      flex-direction: column;
      min-width: 0;
    }

    .variant-picker__label {
      font-weight: bold;
    }

    .variant-dropdown {
      padding: 15px 35px 15px 15px;
      border-radius: 15px;
      border: 1px solid var(--color-primary);
      font-size: var(--font-large);
      color: var(--color-primary);
      outline: none;
      cursor: pointer;
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      background-image: url('{{ 'icon-dropdown.svg' | asset_url }}');
      background-repeat: no-repeat;
      background-position: right 10px center;
      background-size: 15px;
      background-color: var(--color-neutral);
    }

    #reset-plan {
      display: flex;
      align-items: center;
      justify-content: center;
      border: none;
      gap: 7px;
      width: auto;
      padding: 8px 12px 8px 8px;
      border-radius: 15px;
      cursor: pointer;
      color: var(--color-primary);
      font-size: 14px;
      font-weight: bold;
      text-align: left;
      background: transparent;
      text-decoration: none;
      background-color: var(--color-background-third);
    }

    #reset-plan .reset-text {
      line-height: 1;
    }

    #reset-plan svg {
    vertical-align: middle;
    transition: transform 0.5s ease;
  }

  #reset-plan svg.rotated {
    transform: rotate(360deg);
  }



    .variant-picker-btn__mobile,
    .variant-picker-btn {
      display: flex;
      gap: 15px;
      width: 500px;
    }

    .variant-picker-btn__mobile button,
    .variant-picker-btn button {
      width: 100%;
      border-radius: 15px;
      font-size: var(--font-large);
      font-weight: bold;
      color: var(--color-neutral);
      transition: transform 0.3s ease
      , box-shadow 0.3s ease;
      cursor: pointer;
    }


    .variant-picker-btn__mobile button:active,
    .variant-picker-btn button:active {
      transform: scale(0.96);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .variant-picker-btn__mobile .cart,
    .variant-picker-btn .cart {
      border: 1px groove var(--secondary);
      background-color: var(--color-secondary);
    }

    .variant-picker-btn__mobile .buy,
    .variant-picker-btn .buy {
      border: 1px groove var(--color-primary);
      background-color: var(--color-primary);
    }
    .variant-picker-btn__mobile h2 {
      font-size: 22px;
      font-weight: normal;
    }
    #variant-price {
      color: var(--color-secondary) !important;
      margin-top: 7px;
    }
    .money,
    .buckscc-money {
      color: var(--color-secondary) !important;
      font-size: var(--font-supper-large);
      font-weight: bold;
    }


    .variant-dropdown.variant-warning {
      border-color: red;
      box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.3);
      position: relative;
    }

    .variant-dropdown.variant-warning::after {
      content: "Please select this option";
      position: absolute;
      left: 10px;
      top: 100%;
      margin-top: 4px;
      background: red;
      color: white;
      padding: 4px 8px;
      font-size: 12px;
      border-radius: 5px;
      white-space: nowrap;
      z-index: 1000;
    }
</style>

{% style %}
  .variant-picker-btn__mobile {
    display: none;
  }
  @media (max-width: 1440px) {
    .variant-picker-btn__mobile,
    .variant-picker-btn {
      width: 100%;
    }
  }
  @media (max-width: 768px) {
    .variant-picker-btn__mobile {
      display: block;
    }
    .variant-picker-btn {
      display: none;
    }
    .variant-picker-btn__mobile {
      position: fixed;
      left: 0;
      bottom: 0;
      width: 100%;

      z-index: 999;
    }
    .variant-picker-btn__mobile-wrapper {
      display: flex;
      gap: 10px;
    }
    #variant-price-desktop {
      display: none;
    }
    .insurance-product {
      flex-direction: column;
    }
    #reset-plan {
      padding: 8px 10px;
    }
    #reset-plan .reset-text {
      display: none;
    }
    #reset-plan svg {
      vertical-align: middle;
    }

    /*

   #selected-variant-display { 
   font-size: var(--font-large); 
   font-weight: 500; 
   color: var(--color-secondary); 
   border: 1px solid var(--color-border); 
   } 
*/
  }
{% endstyle %}

{% if customer %}
  <script>
    var customerLoggedIn = true;
  </script>
{% else %}
  <script>
    var customerLoggedIn = false;
  </script>
{% endif %}

<div id="custom-variant-selector">
  {% assign min_price = product.variants.first.price %}
  {% assign max_price = product.variants.first.price %}
  {% for variant in product.variants %}
    {% if variant.price < min_price %}
      {% assign min_price = variant.price %}
    {% endif %}
    {% if variant.price > max_price %}
      {% assign max_price = variant.price %}
    {% endif %}
  {% endfor %}

  {% assign min_price_formatted = min_price | money_with_currency %}
  {% assign max_price_formatted = max_price | money_with_currency %}

  <div style="display: flex; align-items: center;">
    <div
      class="
        variant-option__wrapper {% if product.metafields.product.category.value == "Insurance" %}
          insurance-product
        {% endif %}
      "
    >
      {% for option in product.options_with_values %}
        <div class="variant-option" data-option-index="{{ forloop.index0 }}">
          <label class="variant-picker__label">{{ option.name }}</label>
          <select class="variant-dropdown" data-option-name="{{ option.name }}">
            <option
              value=""
              disabled
              selected
              hidden
            >
              Choose Option
            </option>
            {% assign values_seen = '' %}
            {% for value in option.values %}
              {% unless values_seen contains value %}
                <option value="{{ value }}">{{ value }}</option>
                {% assign values_seen = values_seen | append: value | append: ',' %}
              {% endunless %}
            {% endfor %}
          </select>
        </div>
      {% endfor %}
      <!-- Tombol reset -->
      {% if product.metafields.product.category.value != 'Insurance' %}
        <button id="reset-plan" type="button" style="margin: 27px 0 0 0;">
          {{- 'reset.svg' | inline_asset_content -}}
          <span class="reset-text"
            >reset<br>
            selection</span
          >
        </button>
      {% endif %}
    </div>
  </div>

  <div id="variant-metafield-display" class="my-4"></div>
  <!-- Quantity -->
  <div class="quantity-wrapper" {% if product.metafields.product.category.value == "Top_Up_A" or product.metafields.product.category.value == "Top_Up_B" or product.metafields.product.category.value == "Top_Up_C" %}style="margin: 15px 0 5px;"{% else %}style="margin: 15px 0;"{% endif %}>
    <div {% if product.metafields.product.category.value == "Top_Up_A" or product.metafields.product.category.value == "Top_Up_B" or product.metafields.product.category.value == "Top_Up_C" %}hidden{% endif %}>
      <label
        class="variant-picker__label"
        for="quantity"
        style="display: block; margin-bottom: 4px;"
        >Quantity</label
      >
      <div class="quantity-input">
        <button
          type="button"
          class="quantity-btn"
          id="quantity-decrease"
          style="border-right: 1px solid var(--color-border);"
        >
          <span class="svg-wrapper">{{ 'icon-minus.svg' | inline_asset_content }}</span>
        </button>
        <input
          type="number"
          id="quantity"
          name="quantity"
          min="1"
          value="1"
          class="quantity-number"
        >
        <button
          type="button"
          class="quantity-btn"
          id="quantity-increase"
          style="border-left: 1px solid var(--color-border);"
        >
          <span class="svg-wrapper">{{ 'icon-plus.svg' | inline_asset_content }}</span>
        </button>
      </div>
    </div>
    {% if product.metafields.product.category.value == 'Insurance' %}
      <button id="reset-plan" type="button" style="margin-top: 30px;">
        {{- 'reset.svg' | inline_asset_content -}}
        <span
          >reset<br>
          selection</span
        >
      </button>
    {% endif %}
  </div>

  <div style="max-height: 200px; overflow-y: auto; margin-bottom: 25px;">{{ product.description }}</div>

  <!-- Tombol cart dan buy -->
  <div class="variant-picker-btn">
    {% if product.metafields.product.category.value == 'Top_Up_A'
        or product.metafields.product.category.value == 'Top_Up_B'
        or product.metafields.product.category.value == 'Top_Up_C'
      %}
        <button
          class="buy"
          type="button"
          id="buy-topup-button"
        >
          <p>Top Up</p>
        </button>
        {%  else %}
        <button
      class="cart"
      type="button"
      id="add-to-cart"
    >
      <p>Add to Cart</p>
    </button>
    {% if product.metafields.product.category.value == 'Insurance' %}
    {% endif %}
    <button
      class="buy"
      type="button"
      id="buy-now-button"
    >
      <p>Buy Now</p>
    </button>
      {% endif %}
  </div>
</div>

<!-- Harga varian tersembunyi -->
<div id="variant-prices" style="display: none;">
  {% for variant in product.variants %}
    <span class="money" data-variant-id="{{ variant.id }}">
      {{ variant.price | money_with_currency }}
    </span>
  {% endfor %}
</div>

<!-- Versi mobile -->
<div class="variant-picker-btn__mobile">
  <div id="bucks-mobile" style="margin-left: 11px;"></div>
  <div style="padding: 20px 24px; background-color: var(--color-neutral);">
    <h2>{{ product.title }}</h2>
    <span id="selected-variant-display">Selected Variant</span>

    <div id="variant-price-mobile" class="money">
      {{ min_price_formatted -}}
      {%- unless min_price == max_price %}
        - {{ max_price_formatted -}}
      {%- endunless %}
    </div>
    <div class="variant-picker-btn__mobile-wrapper">
      {% if product.metafields.product.category.value == 'Top_Up_A'
        or product.metafields.product.category.value == 'Top_Up_B'
        or product.metafields.product.category.value == 'Top_Up_C'
      %}
        <button
          class="buy"
          type="button"
          id="buy-topup-button"
        >
          <p>Buy Top Up</p>
        </button>
        {% else %}
        <button
        class="cart"
        type="button"
        id="add-to-cart-mobile"
      >
        <p>Add to Cart</p>
      </button>
      <button
        class="buy"
        type="button"
        id="buy-now-button-mobile"
      >
        <p>Buy Now</p>
      </button>
      {% endif %}
    </div>
  </div>
</div>

<div
  class="variant-picker-popup"
  id="variant-popup"
  style="display: none;"
>
  <span id="variant-popup-message"></span>
</div>

{% style %}
  .variant-picker-popup {
    padding: 10px;
    min-height: 0;
    background-color: var(--color-primary);
    color: var(--color-neutral);
    font-size: var(--font-large);
    border-radius: 10px;
    width: 270px;
    box-shadow: var(--box-shadow);
    position: fixed;
    top: 80px;
    right: 10%;
    z-index: 999;
    text-align: center;
  }
{% endstyle %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var btn = document.getElementById('reset-plan');
    var svg = btn?.querySelector('svg');
    if (btn && svg) {
      let currentRotation = 0;

      btn.addEventListener('click', function () {
        currentRotation += 360;
        svg.style.transform = `rotate(${currentRotation}deg)`;
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  const variantDropdowns = document.querySelectorAll('.variant-dropdown');
  const metafieldDisplay = document.getElementById('variant-metafield-display');
  
  // Data semua variant dengan metafield variant.type
  const variantsData = [
  {% for variant in product.variants %}
    {
      id: {{ variant.id }},
      title: "{{ variant.title | escape }}",
      type: {{ variant.metafields.variant.type | json }},
      coverage: {{ variant.metafields.variant.coverage.value | json }},
      options: [
        {% for option in variant.options %}
          "{{ option | escape }}"{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ]
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
];

  
  // function updateMetafieldDisplay() {
  //   const selectedOptions = [];
  //   variantDropdowns.forEach(dropdown => {
  //     selectedOptions.push(dropdown.value);
  //   });
    
  //   const matchedVariant = variantsData.find(variant => {
  //     return variant.options.every((option, index) => {
  //       return option === selectedOptions[index];
  //     });
  //   });
    
  //   // Debugging: Lihat di console
  //   console.log('Variant yang cocok:', matchedVariant);
    
  //   if (matchedVariant) {
  //     // Tampilkan metafield variant.type
  //     if (matchedVariant.type) {
  //       if (Array.isArray(matchedVariant.type)) {
  //         // Jika berupa array
  //         metafieldDisplay.innerHTML = `
  //           <div class="variant-type-wrapper">
  //             <strong>Tipe Variant:</strong>
  //             <ul>
  //               ${matchedVariant.type.map(item => `<li>${item}</li>`).join('')}
  //             </ul>
  //           </div>
  //         `;
  //       } else if (typeof matchedVariant.type === 'object' && matchedVariant.type.value) {
  //         // Jika format object {value: ...}
  //         metafieldDisplay.innerHTML = `
  //           <div class="variant-type-wrapper">
  //             <strong>Tipe Variant:</strong>
  //             <span>${matchedVariant.type.value}</span>
  //           </div>
  //         `;
  //       } else {
  //         // Jika string biasa
  //         metafieldDisplay.innerHTML = `
  //           <div class="variant-type-wrapper">
  //             <strong>Tipe Variant:</strong>
  //             <span>${matchedVariant.type}</span>
  //           </div>
  //         `;
  //       }
  //     } else {
  //       metafieldDisplay.innerHTML = '<em>Tidak ada tipe variant</em>';
  //     }
  //   } else {
  //     metafieldDisplay.innerHTML = '';
  //   }
  // }
  
  // variantDropdowns.forEach(dropdown => {
  //   dropdown.addEventListener('change', updateMetafieldDisplay);
  // });
  
  // updateMetafieldDisplay();
  });
</script>

<script>
  window.productCoverage = [].concat(
    {% if product.metafields.coverage.country.value %}
      {{ product.metafields.coverage.country.value | json }},
    {% else %}
      [],
    {% endif %}
    {% if product.metafields.coverage.country_1.value %}
      {{ product.metafields.coverage.country_1.value | json }}
    {% else %}
      []
    {% endif %}
  );
</script>

<script>
  const productVariants = {{ product.variants | json }};
  const variantDropdowns = document.querySelectorAll('.variant-dropdown');
  const priceDivDesktop = document.getElementById('variant-price-desktop');
  const priceDivMobile = document.getElementById('variant-price-mobile');
  const resetBtn = document.getElementById('reset-plan');
  const quantityInput = document.getElementById('quantity');
  const minusBtn = document.getElementById('quantity-decrease');
  const plusBtn = document.getElementById('quantity-increase');
  const addToCartButton = document.getElementById('add-to-cart');
  const buyNowButton = document.getElementById('buy-now-button');
  const selectedVariantDisplay = document.getElementById('selected-variant-display');

  const addToCartButtonDesktop = document.getElementById('add-to-cart');
  const buyNowButtonDesktop = document.getElementById('buy-now-button');
  const addToCartButtonMobile = document.getElementById('add-to-cart-mobile');
  const buyNowButtonMobile = document.getElementById('buy-now-button-mobile');

  addToCartButtonDesktop?.addEventListener("click", () => handleCartAction("add"));
  buyNowButtonDesktop?.addEventListener("click", () => handleCartAction("buy"));
  addToCartButtonMobile?.addEventListener("click", () => handleCartAction("add"));
  buyNowButtonMobile?.addEventListener("click", () => handleCartAction("buy"));

  const defaultPriceHTML = priceDivDesktop?.innerHTML || "";
  const defaultPriceMobileHTML = priceDivMobile?.innerHTML || "";

  let currentMinusHandler = null;

  function updateMinusButtonHandler(minQty) {
    if (!minusBtn) return;

    if (currentMinusHandler) {
      minusBtn.removeEventListener('click', currentMinusHandler);
    }

    currentMinusHandler = function() {
      if (parseInt(quantityInput.value) <= minQty) {
        quantityInput.value = minQty;
      }
    };

    minusBtn.addEventListener('click', currentMinusHandler);
  }

  function getSelectedOptions() {
    return Array.from(variantDropdowns).map(select => select.value);
  }

  function updateDropdownOptions() {
    const selectedOptions = getSelectedOptions();

    variantDropdowns.forEach((select, index) => {
      Array.from(select.options).forEach(option => {
        if (option.value === "") {
          option.disabled = false;
          option.classList.remove('disabled-option');
          return;
        }

        const testOptions = [...selectedOptions];
        testOptions[index] = option.value;

        const match = productVariants.some(variant =>
          variant.options.every((opt, i) =>
            testOptions[i] === "" || testOptions[i] === opt
          )
        );

        if (!match) {
          option.disabled = true;
          option.classList.add('disabled-option');
        } else {
          option.disabled = false;
          option.classList.remove('disabled-option');
        }
      });

      if (select.options[select.selectedIndex]?.disabled) {
        select.selectedIndex = 0;
      }
    });
  }

  function findVariant() {
    const selectedOptions = getSelectedOptions();

    if (selectedOptions.includes("")) {
      if (priceDivDesktop) priceDivDesktop.innerHTML = defaultPriceHTML;
      if (priceDivMobile) priceDivMobile.innerHTML = defaultPriceMobileHTML;
      if (selectedVariantDisplay) selectedVariantDisplay.textContent = "Pilih varian";
      updateDropdownOptions();
      updateMinusButtonHandler(1);
      return null;
    }

    const matchedVariant = productVariants.find(variant =>
      variant.options.every((opt, index) => opt === selectedOptions[index])
    );

    if (matchedVariant) {
      if (matchedVariant.available) {
        const moneySpan = document.querySelector(`#variant-prices span[data-variant-id="${matchedVariant.id}"]`);
        if (moneySpan) {
          if (priceDivDesktop) priceDivDesktop.innerHTML = moneySpan.outerHTML;
          if (priceDivMobile) priceDivMobile.innerHTML = moneySpan.outerHTML;
        }
      } else {
        if (priceDivDesktop) priceDivDesktop.textContent = "Varian tidak tersedia";
        if (priceDivMobile) priceDivMobile.textContent = "Varian tidak tersedia";
      }

      const variantType = getVariantType(matchedVariant);

      if (variantType === "Duo Plus") {
        quantityInput.min = 2;
        quantityInput.value = Math.max(2, parseInt(quantityInput.value) || 2);
        updateMinusButtonHandler(2);
      } else {
        quantityInput.min = 1;
        updateMinusButtonHandler(1);
      }
    } else {
      if (priceDivDesktop) priceDivDesktop.textContent = "Varian tidak ditemukan";
      if (priceDivMobile) priceDivMobile.textContent = "Varian tidak ditemukan";
      quantityInput.min = 1;
      updateMinusButtonHandler(1);
    }

    if (selectedVariantDisplay) {
      const selected = selectedOptions.filter(v => v !== "").join(" - ");
      selectedVariantDisplay.textContent = selected || "Choose Variant";
    }

    updateDropdownOptions();

    if (typeof Currency !== 'undefined' && typeof Currency.convertAll === 'function') {
      Currency.convertAll(shopCurrency, Currency.currentCurrency);
    }

    return matchedVariant;
  }

  function adjustQuantity(delta) {
    const current = parseInt(quantityInput.value) || 1;
    quantityInput.value = Math.max(quantityInput.min, current + delta);
  }

  minusBtn?.addEventListener('click', () => adjustQuantity(-1));
  plusBtn?.addEventListener('click', () => adjustQuantity(1));

  resetBtn?.addEventListener('click', () => {
    variantDropdowns.forEach(select => {
      select.selectedIndex = 0;
    });
    quantityInput.min = 1;
    quantityInput.value = 1;
    updateMinusButtonHandler(1);

    if (priceDivDesktop) priceDivDesktop.innerHTML = defaultPriceHTML;
    if (priceDivMobile) priceDivMobile.innerHTML = defaultPriceMobileHTML;

    if (selectedVariantDisplay) selectedVariantDisplay.textContent = "Selected Variant";
    updateDropdownOptions();

    if (typeof Currency !== 'undefined' && typeof Currency.convertAll === 'function') {
      Currency.convertAll(shopCurrency, Currency.currentCurrency);
    }
  });

  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const countEl = document.getElementById('cart-count');
        if (countEl) {
          countEl.textContent = cart.item_count;
        }
      })
      .catch(error => {
        console.error("Failed to update cart count:", error);
      });
  }

  function handleCartAction(action) {
  const variant = findVariant();
  const quantity = parseInt(quantityInput.value) || 1;

  // **NEW** → Ambil coverage dari product metafield
  const variantCoverage = window.productCoverage || [];

  if (!variant || !variant.available) {
    let hasEmpty = false;
    variantDropdowns.forEach(select => {
      if (select.value === "") {
        select.classList.add("variant-warning");
        hasEmpty = true;
      }
    });

    if (hasEmpty) {
      const firstEmpty = Array.from(variantDropdowns).find(select => select.value === "");
      if (firstEmpty) {
        firstEmpty.scrollIntoView({ behavior: "smooth", block: "center" });
      }
    }

    return;
  }

  const productCategory = "{{ product.metafields.product.category.value }}";

if (action === "buy" && productCategory === "Insurance") {
  const variantType = getVariantType(variant);

  sessionStorage.removeItem('ProductItems');

  let ProductItems = [];

  const newItem = {
    productTitle: "{{ product.title }}",
    category: productCategory,
    variantType: variantType,
    variantId: variant.id,
    variantTitle: variant.title,
    quantity: quantity,
    variantCoverage: variantCoverage
  };

  ProductItems.push(newItem);

  sessionStorage.setItem('ProductItems', JSON.stringify(ProductItems));

  if (customerLoggedIn) {
    window.location.href = "/pages/form-insurance";
  } else {
    window.location.href = "/account/login?return_url=/pages/form-insurance";
  }

  return;
}


  const payload = { id: variant.id, quantity: quantity };
  const popup = document.getElementById("variant-popup");

  function showPopup(message) {
    const messageEl = document.getElementById("variant-popup-message");
    if (messageEl) {
      messageEl.textContent = message;
    }

    popup.style.display = "block";
    setTimeout(() => {
      popup.style.display = "none";
    }, 2000);
  }

  if (action === "buy") {
    fetch("/cart/clear.js", { method: "POST" }).then(() => {
      fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      }).then(() => {
        window.location.href = "/checkout";
      });
    });
  } else {
    fetch("/cart/add.js", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest"
      },
      body: JSON.stringify(payload)
    })
    .then(res => res.json())
    .then(() => {
      showPopup("Item successfully added to cart.");
      updateCartCount();
    })
    .catch(err => {
      console.error("Add to cart failed:", err);
      showPopup("Failed to add product");
    });
  }
}

 const buyTopUpDesktop = document.getElementById("buy-topup-button");
  const buyTopUpMobile = document.getElementById("buy-topup-button-mobile");

  buyTopUpDesktop?.addEventListener("click", handleBuyTopUp);
  buyTopUpMobile?.addEventListener("click", handleBuyTopUp);

  function handleBuyTopUp() {
  const variant = findVariant();
  // Force quantity to always be 1 for top up products
  const quantity = 1; // Langsung set ke 1, abaikan input quantity
  
  const iccid = sessionStorage.getItem("iccid") || "";

  if (!variant || !variant.available) {
    let hasEmpty = false;
    variantDropdowns.forEach(select => {
      if (select.value === "") {
        select.classList.add("variant-warning");
        hasEmpty = true;
      }
    });

    if (hasEmpty) {
      const firstEmpty = Array.from(variantDropdowns).find(select => select.value === "");
      if (firstEmpty) {
        firstEmpty.scrollIntoView({ behavior: "smooth", block: "center" });
      }
    }
    return;
  }

  const payload = {
    id: variant.id,
    quantity: quantity, // Quantity selalu 1
    attributes: {
      iccid: iccid
    }
  };

  fetch("/cart/clear.js", { method: "POST" }).then(() => {
    fetch("/cart/add.js", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    })
    .then(() => {
      window.location.href = "/checkout";
    })
    .catch(err => {
      console.error("Failed to add top up product:", err);
      const popup = document.getElementById("variant-popup");
      const messageEl = document.getElementById("variant-popup-message");
      if (popup && messageEl) {
        messageEl.textContent = "Failed to buy top up.";
        popup.style.display = "block";
        setTimeout(() => {
          popup.style.display = "none";
        }, 2000);
      }
    });
  });
}


  function getVariantType(variant) {
    window.variantsData = [
  {% for variant in product.variants %}
    {
      id: {{ variant.id }},
      title: "{{ variant.title | escape }}",
      type: {{ variant.metafields.variant.type | json }},
      options: [
        {% for option in variant.options %}
          "{{ option | escape }}"{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ]
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
];


    const matchedVariant = variantsData.find(v => v.id === variant.id);
    if (matchedVariant && matchedVariant.type) {
      if (Array.isArray(matchedVariant.type)) {
        return matchedVariant.type.join(', ');
      } else if (typeof matchedVariant.type === 'object' && matchedVariant.type.value) {
        return matchedVariant.type.value;
      } else {
        return matchedVariant.type;
      }
    }
    return '';
  }

  addToCartButton?.addEventListener("click", () => handleCartAction("add"));
  buyNowButton?.addEventListener("click", () => handleCartAction("buy"));

  variantDropdowns.forEach(select => {
    select.addEventListener('change', findVariant);
  });

  selectedVariantDisplay?.addEventListener('click', () => {
    const variantWrapper = document.querySelector('.variant-option__wrapper');
    if (variantWrapper) {
      const rect = variantWrapper.getBoundingClientRect();
      const offsetTop = window.scrollY + rect.top;
      const offsetMiddle = offsetTop - (window.innerHeight / 2) + (rect.height / 2) + 45;

      window.scrollTo({
        top: offsetMiddle,
        behavior: 'smooth'
      });
    }
  });

  updateDropdownOptions();
  updateMinusButtonHandler(1);
</script>
