{% style %}
  .quantity-input {
    display: inline-flex;
    align-items: center;
    border: 1px solid var(--color-primary);
    border-radius: 24px;
    overflow: hidden;
    width: fit-content;
    padding: 5px;
  }

  .quantity-wrapper {
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .quantity-btn {
    background-color: transparent;
    border: none;
    padding: 8px 12px;
    font-size: 16px;
    color: var(--color-primary);
    cursor: pointer;
    user-select: none;
  }

  .quantity-number {
    width: 40px;
    text-align: center;
    border: none;
    font-size: 16px;
    outline: none;
    color: var(--color-primary);
  }

  .quantity-btn:disabled {
    color: var(--color-primary);
    cursor: not-allowed;
  }

  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type="number"] {
    -moz-appearance: textfield;
  }

  .quantity-btn:disabled {
    cursor: not-allowed;
    opacity: 0.4;
  }

  .disabled-option {
    color: #bbb;
  }

  .variant-option__wrapper {
    display: flex;
    gap: 10px;
    width: 100%;
  }
  .variant-option {
    display: flex;

    flex-direction: column;
    min-width: 0;
  }

  .variant-picker__label {
    font-weight: bold;
    color: var(--color-primary);
  }

  .variant-dropdown {
    padding: 15px 35px 15px 15px;
    border-radius: 15px;
    border: 1px solid var(--color-primary);
    font-size: var(--font-large);
    color: var(--color-primary);
    outline: none;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url('{{ 'icon-dropdown.svg' | asset_url }}');
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 15px;
    background-color: var(--color-neutral);
  }

  #reset-plan {
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    gap: 7px;
    width: auto;
    padding: 8px 12px 8px 8px;
    border-radius: 15px;
    cursor: pointer;
    color: var(--color-primary);
    font-size: 14px;
    font-weight: bold;
    text-align: left;
    background: transparent;
    text-decoration: none;
    background-color: var(--color-background-third);
  }

  #reset-plan .reset-text {
    line-height: 1;
  }

  #reset-plan svg {
    vertical-align: middle;
    transition: transform 0.5s ease;
  }

  #reset-plan svg.rotated {
    transform: rotate(360deg);
  }
  .variant-picker-btn__mobile,
  .variant-picker-btn {
    display: flex;
    gap: 15px;
    width: 500px;
  }
  .variant-picker-btn__mobile button,
  .variant-picker-btn button {
    width: 100%;
    border-radius: 15px;
    font-size: var(--font-large);
    font-weight: bold;
    color: var(--color-neutral);
    transition: transform 0.3s ease
    , box-shadow 0.3s ease;
    cursor: pointer;
  }


  .variant-picker-btn__mobile button:active,
  .variant-picker-btn button:active {
    transform: scale(0.96);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .variant-picker-btn__mobile .cart,
  .variant-picker-btn .cart {
    border: 1px groove var(--secondary);
    background-color: var(--color-secondary);
  }

  .variant-picker-btn__mobile .buy,
  .variant-picker-btn .buy {
    border: 1px groove var(--color-primary);
    background-color: var(--color-primary);
  }
  .variant-picker-btn__mobile h2 {
    font-size: 22px;
    font-weight: normal;
  }
  #variant-price {
    color: var(--color-secondary) !important;
    margin-top: 7px;
  }
  .money,
  .buckscc-money {
    color: var(--color-secondary) !important;
    font-weight: bold;
  }
  #variant-price-desktop {
    font-size: 22px;
  }
  #variant-price-mobile {
    font-size: 20px;
  }
  .variant-dropdown.variant-warning {
    border-color: red;
    box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.3);
    position: relative;
  }

  .variant-dropdown.variant-warning::after {
    content: "Please select this option";
    position: absolute;
    left: 10px;
    top: 100%;
    margin-top: 4px;
    background: red;
    color: white;
    padding: 4px 8px;
    font-size: 12px;
    border-radius: 5px;
    white-space: nowrap;
    z-index: 1000;
  }
  .insurance-addon__wrapper {
    margin-top: 10px;
  }
  .insurance-addon__wrapper label{
    font-weight: bold;
    color: var(--color-primary);
  }
  #selected-variant-display {
    color: var(--color-primary);
  }
  .tooltip-label {
    position: relative;
    display: inline-block;
    cursor: help;
    margin-left: 6px;
  }
  .tooltip-label .tooltip-text {
    visibility: hidden;
    width: 350px;
    background-color: var(--color-background-third);
    color: var(--color-primary);
    text-align: left;
    padding: 8px 10px;
    border-radius: 6px;
    position: absolute;
    left: 50%;           /* Posisikan horizontal di tengah elemen */
    top: 100%;           /* Posisikan tepat di bawah elemen */
    margin-top: 8px;     /* Jarak antara elemen & tooltip */
    transform: translateX(-50%); /* Pusatkan secara horizontal */
    white-space: normal;
    opacity: 0;
    transition: opacity 0.3s;
    z-index: 10;
    font-size: 14px;
  }

  .tooltip-label .tooltip-text::after {
    content: "";
    position: absolute;
    top: -10px; /* Panah di atas tooltip */
    left: 50%;
    transform: translateX(-50%);
    border-width: 6px;
    border-style: solid;
    border-color: transparent transparent var(--color-background-third) transparent;
  }

  .tooltip-label:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
  }
  .iccid-popup {
    position: fixed;
    width: 400px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: var(--color-neutral);
    padding: 20px;
    border-radius: 10px;
    box-shadow: var(--box-shadow);
    z-index: 9999;
  }
{% endstyle %}

{% style %}
  .variant-picker-btn__mobile {
    display: none;
  }
  
  @media (max-width: 1440px) {
    .variant-picker-btn__mobile,
    .variant-picker-btn {
      width: 100%;
    }
  }
  @media (max-width: 768px) {
    .variant-picker-btn__mobile {
      display: block;
    }
    .variant-picker-btn {
      display: none;
    }
    .variant-picker-btn__mobile {
      position: fixed;
      left: 0;
      bottom: 0;
      width: 100%;
      z-index: 888;
    }
    .variant-picker-btn__mobile-wrapper {
      display: flex;
      gap: 10px;
    }
    #variant-price-desktop {
      display: none;
    }
    .insurance-product {
      flex-direction: column;
    }
    #reset-plan {
      padding: 8px 10px;
    }
    #reset-plan .reset-text {
      display: none;
    }
    #reset-plan svg {
      vertical-align: middle;
    }
  }
  @media (max-width: 426px) {
    .iccid-popup {
      width: 90%;
    }
  }
{% endstyle %}

{% if customer %}
  <script>
    var customerLoggedIn = true;
  </script>
{% else %}
  <script>
    var customerLoggedIn = false;
  </script>
{% endif %}

<div id="custom-variant-selector">
  {% assign min_price = product.variants.first.price %}
  {% assign max_price = product.variants.first.price %}
  {% for variant in product.variants %}
    {% if variant.price < min_price %}
      {% assign min_price = variant.price %}
    {% endif %}
    {% if variant.price > max_price %}
      {% assign max_price = variant.price %}
    {% endif %}
  {% endfor %}

  {% assign min_price_formatted = min_price | money_with_currency %}
  {% assign max_price_formatted = max_price | money_with_currency %}

  <div id="variant-warning-message" 
     style="color:var(--color-primary); 
            font-size: 14px; 
            margin-bottom:10px; 
            display:none; 
            background-color: var(--color-background-third); 
            border-radius: 15px; 
            padding: 10px; 
            width: fit-content; 
            display: none; 
            max-width: 100%;">
  </div>

  <div style="display: flex; align-items: center;">
    <div class="variant-option__wrapper {% if product.metafields.product.category.value == "Insurance" %}insurance-product{% endif %}">
      {% for option in product.options_with_values %}
        <div class="variant-option" data-option-index="{{ forloop.index0 }}">
          <label class="variant-picker__label">
            {{ option.name }}
            {% if forloop.index0 == 1 and product.metafields.product.category.value == 'eSIM' or product.metafields.product.category.value == 'SIM_Card' %}
              <span class="tooltip-label">
                {{ 'icon-info.svg' | inline_asset_content }}
                <span class="tooltip-text">
                    <li> Unlimited Data: Speeds may be reduced to 128 kbps after reaching the Fair Usage Policy (FUP) limit, and will automatically return to normal the next day.</li>
                    <li> Big Data: Data can be used at any time during the active period with no daily usage limits. When the data runs out, the internet will stop.</li>
                  </span>
              </span>
            {% endif %}
          </label>
          <select class="variant-dropdown" data-option-name="{{ option.name }}">
            <option
              value=""
              disabled
              selected
              hidden
            >
              Choose Option
            </option>
            {% assign values_seen = '' %}
            {% for value in option.values %}
              {% unless values_seen contains value %}
                <option value="{{ value }}">{{ value }}</option>
                {% assign values_seen = values_seen | append: value | append: ',' %}
              {% endunless %}
            {% endfor %}
          </select>
        </div>
      {% endfor %}

      <!-- Tombol reset -->
      {% if product.metafields.product.category.value != 'Insurance' %}
        <button id="reset-plan" type="button" style="margin: 27px 0 0 0;">
          {{- 'reset.svg' | inline_asset_content -}}
          <span class="reset-text"
            >reset<br>
            selection</span
          >
        </button>
      {% endif %}
    </div>
  </div>

  {% if product.metafields.product.category.value == 'Insurance' %}
    {% render 'insurance-addon' %}
    {% else %}
  {% endif %}

  <!-- Quantity -->
  <div
    class="quantity-wrapper"
    {% if product.metafields.product.category.value == 'Top_Up_A'
      or product.metafields.product.category.value == 'Top_Up_B'
      or product.metafields.product.category.value == 'Top_Up_C'
    %}
      style="margin: 15px 0 5px;"
    {% else %}
      style="margin: 15px 0;"
    {% endif %}
  >
    <div
      {% if product.metafields.product.category.value == 'Top_Up_A'
        or product.metafields.product.category.value == 'Top_Up_B'
        or product.metafields.product.category.value == 'Top_Up_C'
      %}
        hidden
      {% endif %}
    >
      <label
        class="variant-picker__label"
        for="quantity"
        style="display: block; margin-bottom: 4px;"
        >Quantity</label
      >
      <div class="quantity-input">
        <button
          type="button"
          class="quantity-btn"
          id="quantity-decrease"
          style="border-right: 1px solid var(--color-border);"
        >
          <span class="svg-wrapper">{{ 'icon-minus.svg' | inline_asset_content }}</span>
        </button>
        <input
          type="number"
          id="quantity"
          name="quantity"
          min="1"
          value="1"
          class="quantity-number"
        >
        <button
          type="button"
          class="quantity-btn"
          id="quantity-increase"
          style="border-left: 1px solid var(--color-border);"
        >
          <span class="svg-wrapper">{{ 'icon-plus.svg' | inline_asset_content }}</span>
        </button>
      </div>
    </div>

    {% if product.metafields.product.category.value == 'Insurance' %}
      <button id="reset-plan" type="button" style="margin-top: 30px;">
        {{- 'reset.svg' | inline_asset_content -}}
        <span
          >reset<br>
          selection</span
        >
      </button>
    {% endif %}
  </div>

  <div style="max-height: 200px; overflow-y: auto; margin-bottom: 25px;">{{ product.description }}</div>

  <!-- Tombol cart dan buy -->
  <div class="variant-picker-btn">
    {% if product.metafields.product.category.value == 'Top_Up_A'
      or product.metafields.product.category.value == 'Top_Up_B'
      or product.metafields.product.category.value == 'Top_Up_C'
    %}
      <button
        class="buy"
        type="button"
        id="buy-topup-button"
      >
        <p>Top Up</p>
      </button>
    {% else %}
      <button
        class="cart"
        type="button"
        id="add-to-cart"
      >
        <p>Add to Cart</p>
      </button>
      {% if product.metafields.product.category.value == 'Insurance' %}
      {% endif %}
      <button
        class="buy"
        type="button"
        id="buy-now-button"
      >
        <p>Buy Now</p>
      </button>
    {% endif %}
  </div>
</div>

<!-- Harga varian tersembunyi -->
<div id="variant-prices" style="display: none;">
  {% for variant in product.variants %}
    <span class="money price" data-variant-id="{{ variant.id }}" data-price="{{ variant.price }}">
      {{ variant.price | money_with_currency }}
    </span>
  {% endfor %}
</div>

<!-- Versi mobile -->
<div class="variant-picker-btn__mobile">
  <div id="bucks-mobile" style="margin-left: 11px;"></div>
  <div style="padding: 20px 24px; background-color: var(--color-neutral);">
    <h2 style="font-weight: bold;">{{ product.title }}</h2>
    <span id="selected-variant-display">Selected Variant</span>

    <div id="variant-price-mobile" class="money price">
      {{ min_price_formatted -}}
      {%- unless min_price == max_price %}
        - {{ max_price_formatted -}}
      {%- endunless %}
    </div>
    <div class="variant-picker-btn__mobile-wrapper">
      {% if product.metafields.product.category.value == 'Top_Up_A'
        or product.metafields.product.category.value == 'Top_Up_B'
        or product.metafields.product.category.value == 'Top_Up_C'
      %}
        <button
          class="buy"
          type="button"
          id="buy-topup-button-mobile"
        >
          <p>Buy Top Up</p>
        </button>
      {% else %}
        <button
          class="cart"
          type="button"
          id="add-to-cart-mobile"
        >
          <p>Add to Cart</p>
        </button>
        <button
          class="buy"
          type="button"
          id="buy-now-button-mobile"
        >
          <p>Buy Now</p>
        </button>
      {% endif %}
    </div>
  </div>
</div>

<div
  class="variant-picker-popup"
  id="variant-popup"
  style="display: none;"
>
  <span id="variant-popup-message"></span>
</div>

{% style %}
  .variant-picker-popup {
    padding: 10px;
    min-height: 0;
    background-color: var(--color-primary);
    color: var(--color-neutral);
    font-size: var(--font-large);
    border-radius: 10px;
    width: 270px;
    box-shadow: var(--box-shadow);
    position: fixed;
    top: 80px;
    right: 10%;
    z-index: 999;
    text-align: center;
  }
{% endstyle %}


<script>
  document.addEventListener('DOMContentLoaded', function () {
    const scrollTarget = document.querySelector('.variant-option__wrapper'); // Bagian variant selector
    const scrollTrigger = document.getElementById('selected-variant-display'); // Elemen yang diklik

    if (scrollTrigger && scrollTarget) {
      scrollTrigger.style.cursor = 'pointer'; // opsional: bikin kelihatan bisa diklik
      scrollTrigger.addEventListener('click', function () {
        scrollTarget.scrollIntoView({ behavior: 'smooth', block: 'center' });
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var btn = document.getElementById('reset-plan');
    var svg = btn?.querySelector('svg');
    if (btn && svg) {
      let currentRotation = 0;

      btn.addEventListener('click', function () {
        currentRotation += 360;
        svg.style.transform = `rotate(${currentRotation}deg)`;
      });
    }
  });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
    const variantDropdowns = document.querySelectorAll('.variant-dropdown');
    const metafieldDisplay = document.getElementById('variant-metafield-display');

    // Data semua variant dengan metafield variant.type
    const variantsData = [
    {% for variant in product.variants %}
      {
        id: {{ variant.id }},
        title: "{{ variant.title | escape }}",
        type: {{ variant.metafields.variant.type | json }},
        coverage: {{ variant.metafields.variant.coverage.value | json }},
        options: [
          {% for option in variant.options %}
            "{{ option | escape }}"{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ]
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ];
    });
</script>

<script>
  // Fungsi untuk membersihkan nama negara (replace _ dengan spasi)
  function cleanCoverageData(coverageArray) {
    if (!coverageArray || !Array.isArray(coverageArray)) return [];
    
    return coverageArray.map(country => {
      if (typeof country === 'string') {
        // Replace semua underscore dengan spasi
        return country.replace(/_/g, ' ');
      }
      return country;
    });
  }

  // Data coverage mentah
  const rawCoverage = [].concat(
    {% if product.metafields.coverage.country.value %}
      {{ product.metafields.coverage.country.value | json }},
    {% else %}
      [],
    {% endif %}
    {% if product.metafields.coverage.country_1.value %}
      {{ product.metafields.coverage.country_1.value | json }},
    {% else %}
      [],
    {% endif %}
    {% if product.metafields.coverage.country_2.value %}
      {{ product.metafields.coverage.country_2.value | json }}
    {% else %}
      []
    {% endif %}
  );

  // Simpan data yang sudah dibersihkan
  window.productCoverage = cleanCoverageData(rawCoverage);
</script>

<script>
  const productVariants = {{ product.variants | json }};
  const variantDropdowns = document.querySelectorAll('.variant-dropdown');
  const priceDivDesktop = document.getElementById('variant-price-desktop');
  const priceDivMobile = document.getElementById('variant-price-mobile');
  const resetBtn = document.getElementById('reset-plan');
  const quantityInput = document.getElementById('quantity');
  const minusBtn = document.getElementById('quantity-decrease');
  const plusBtn = document.getElementById('quantity-increase');
  const addToCartButton = document.getElementById('add-to-cart');
  const buyNowButton = document.getElementById('buy-now-button');
  const selectedVariantDisplay = document.getElementById('selected-variant-display');

  // Tambahkan elemen untuk menampilkan title varian yang dipilih
  const selectedVariantTitleDisplay = document.getElementById('selected-variant-title');

  const addToCartButtonDesktop = document.getElementById('add-to-cart');
  const buyNowButtonDesktop = document.getElementById('buy-now-button');
  const addToCartButtonMobile = document.getElementById('add-to-cart-mobile');
  const buyNowButtonMobile = document.getElementById('buy-now-button-mobile');

  addToCartButtonDesktop?.addEventListener("click", () => handleCartAction("add"));
  buyNowButtonDesktop?.addEventListener("click", () => handleCartAction("buy"));
  addToCartButtonMobile?.addEventListener("click", () => handleCartAction("add"));
  buyNowButtonMobile?.addEventListener("click", () => handleCartAction("buy"));

  const defaultPriceHTML = priceDivDesktop?.innerHTML || "";
  const defaultPriceMobileHTML = priceDivMobile?.innerHTML || "";

  let currentMinusHandler = null;

  function updateMinusButtonHandler(minQty) {
    if (!minusBtn) return;

    if (currentMinusHandler) {
      minusBtn.removeEventListener('click', currentMinusHandler);
    }

    currentMinusHandler = function() {
      if (parseInt(quantityInput.value) <= minQty) {
        quantityInput.value = minQty;
      }
    };

    minusBtn.addEventListener('click', currentMinusHandler);
  }

  function getSelectedOptions() {
    return Array.from(variantDropdowns).map(select => select.value);
  }

  function updateVariantTitle() {
    const selectedOptions = getSelectedOptions();
    // Temukan variant yang cocok berdasarkan opsi yang dipilih
    const matchedVariant = productVariants.find(variant =>
      variant.options.every((opt, index) => opt === selectedOptions[index])
    );

    // Jika variant ditemukan, simpan judulnya ke dalam data-variant-title
    const selectedVariantTitleDisplay = document.getElementById('selected-variant-title');
    if (matchedVariant) {
      if (selectedVariantTitleDisplay) {
        selectedVariantTitleDisplay.setAttribute('data-variant-title', matchedVariant.title);
      }
    } else {
      if (selectedVariantTitleDisplay) {
        selectedVariantTitleDisplay.setAttribute('data-variant-title', "Not Available");
      }
    }
  }

  function updateDropdownOptions() {
  const selectedOptions = getSelectedOptions();

  variantDropdowns.forEach((select, index) => {
    Array.from(select.options).forEach(option => {
      if (option.value === "") {
        option.disabled = false;
        option.classList.remove('disabled-option');
        return;
      }

      const testOptions = [...selectedOptions];
      testOptions[index] = option.value;

      const match = productVariants.some(variant =>
        variant.options.every((opt, i) =>
          testOptions[i] === "" || testOptions[i] === opt
        )
      );

      if (!match) {
        option.disabled = true;
        option.classList.add('disabled-option');
      } else {
        option.disabled = false;
        option.classList.remove('disabled-option');
      }
    });

    if (select.options[select.selectedIndex]?.disabled) {
      select.selectedIndex = 0;
    }
  });

  // ✅ Hapus logic warning otomatis, kita pindahkan ke event click
  setupWarningLogic();
}

  let firstSelectWarned = false;
  let secondSelectWarned = false;

  function setupWarningLogic() {
  const warningMessage = document.getElementById('variant-warning-message');
  const firstSelect = variantDropdowns[0]; // Days
  const secondSelect = variantDropdowns[1]; // Data Plan
  const resetBtn = document.getElementById('reset-plan'); // Tombol reset

  if (!warningMessage || !firstSelect || !secondSelect) return;

  // Fungsi untuk tampilkan warning
  let popupTimeout; // simpan timer agar bisa di-clear kalau user close manual

  function getWarningText() {
    const isID =
      location.hostname.includes('gkomunika.com') &&
      location.pathname === '/id/products/esim-saudi-arabia';
    return isID
      ? 'Opsi abu-abu artinya kombinasi hari/kuota tidak tersedia. Klik Reset, lalu pilih hari/kuota yang diinginkan lebih dulu.'
      : 'Greyed-out means the day/plan combo’s unavailable. Click Reset, then pick your preferred day/plan first.';
  }

  function showWarning(message) {
    // Tampilkan warning di elemen utama
    warningMessage.textContent = message;
    warningMessage.style.display = 'block';
  }

  function hideWarning() {
    // Sembunyikan warning
    warningMessage.style.display = 'none';
  }

  // Event: klik Data Plan (dropdown kedua)
  secondSelect.addEventListener('click', () => {
    if (secondSelectWarned) return; // Sudah tampilkan warning sebelumnya

    const firstSelected = firstSelect.value !== "";
    const secondSelected = secondSelect.value !== "";

    if (firstSelected && !secondSelected) {
      const anyDisabled = Array.from(secondSelect.options).some(opt => opt.disabled && opt.value !== "");
      if (anyDisabled) {
        showWarning(getWarningText());
        secondSelectWarned = true; // Tandai sudah tampilkan
      } else {
        hideWarning();
      }
    } else {
      hideWarning();
    }
  });

  // Event: klik Days (dropdown pertama)
  firstSelect.addEventListener('click', () => {
    if (firstSelectWarned) return; // Sudah tampilkan warning sebelumnya

    const firstSelected = firstSelect.value !== "";
    const secondSelected = secondSelect.value !== "";

    if (secondSelected && !firstSelected) {
      const anyDisabled = Array.from(firstSelect.options).some(opt => opt.disabled && opt.value !== "");
      if (anyDisabled) {
        // Pakai pesan yang sama (disesuaikan bahasa via URL)
        showWarning(getWarningText());
        firstSelectWarned = true; // Tandai sudah tampilkan
      } else {
        hideWarning();
      }
    } else {
      hideWarning();
    }
  });

  // Jika kedua dropdown sudah terisi, sembunyikan warning saat ada perubahan
  [firstSelect, secondSelect].forEach(select => {
    select.addEventListener('change', () => {
      if (firstSelect.value === "" || secondSelect.value === "") {
        // Jika ada yang kosong lagi → reset flags
        firstSelectWarned = false;
        secondSelectWarned = false;
      } else {
        hideWarning();
      }
    });
  });

  // Klik tombol reset → warning hilang & reset flags
  if (resetBtn) {
    resetBtn.addEventListener('click', () => {
      hideWarning();
      firstSelectWarned = false;
      secondSelectWarned = false;
    });
  }
}


  function findVariant() {
    const selectedOptions = getSelectedOptions();

    const popupVariantTitleEl = document.getElementById('popup-variant-title');
    const popupVariantOptionsEl = document.getElementById('popup-variant-options');
    const option1El = document.getElementById('display-option1');
    const option2El = document.getElementById('display-option2');
    const option3El = document.getElementById('display-option3');

    if (selectedOptions.includes("")) {
      if (priceDivDesktop) priceDivDesktop.innerHTML = defaultPriceHTML;
      if (priceDivMobile) priceDivMobile.innerHTML = defaultPriceMobileHTML;
      if (selectedVariantDisplay) selectedVariantDisplay.textContent = "Pilih varian";

      // Clear display elements
      if (popupVariantTitleEl) popupVariantTitleEl.textContent = "";
      if (popupVariantOptionsEl) popupVariantOptionsEl.textContent = "";

      if (option1El) option1El.textContent = "-";
      if (option2El) option2El.textContent = "-";
      if (option3El) option3El.textContent = "-";

      updateDropdownOptions();
      updateVariantTitle();
      updateMinusButtonHandler(1);
      return null;
    }

    const matchedVariant = productVariants.find(variant =>
      variant.options.every((opt, index) => opt === selectedOptions[index])
    );

    if (matchedVariant) {
      if (matchedVariant.available) {
        const moneySpan = document.querySelector(`#variant-prices span[data-variant-id="${matchedVariant.id}"]`);
       if (moneySpan) {
  if (priceDivDesktop) priceDivDesktop.innerHTML = ''; 
  if (priceDivMobile) priceDivMobile.innerHTML = '';

  const quantity = parseInt(quantityInput.value) || 1;
  updateUSDPrice(matchedVariant.price, quantity);
  updateIDRPrice(matchedVariant.price, quantity);
}


      } else {
        if (priceDivDesktop) priceDivDesktop.textContent = "Varian tidak tersedia";
        if (priceDivMobile) priceDivMobile.textContent = "Varian tidak tersedia";
      }

      const variantType = getVariantType(matchedVariant);

      if (variantType === "Duo Plus") {
        quantityInput.min = 2;
        quantityInput.value = Math.max(2, parseInt(quantityInput.value) || 2);
        updateMinusButtonHandler(2);
      } else {
        quantityInput.min = 1;
        updateMinusButtonHandler(1);
      }

      // ✅ Update tampilkan variant title & option di popup
      if (popupVariantTitleEl) popupVariantTitleEl.textContent = matchedVariant.title;
      if (popupVariantOptionsEl) popupVariantOptionsEl.textContent = matchedVariant.options.join(" / ");

      // ✅ Update dropdown-style option displays
      if (option1El) option1El.textContent = matchedVariant.options[0] || "-";
      if (option2El) option2El.textContent = matchedVariant.options[1] || "-";
      if (option3El) option3El.textContent = matchedVariant.options[2] || "-";

    } else {
      if (priceDivDesktop) priceDivDesktop.textContent = "Varian tidak ditemukan";
      if (priceDivMobile) priceDivMobile.textContent = "Varian tidak ditemukan";
      quantityInput.min = 1;
      updateMinusButtonHandler(1);

      // Clear variant display
      if (popupVariantTitleEl) popupVariantTitleEl.textContent = "";
      if (popupVariantOptionsEl) popupVariantOptionsEl.textContent = "";

      if (option1El) option1El.textContent = "-";
      if (option2El) option2El.textContent = "-";
      if (option3El) option3El.textContent = "-";
    }

    if (selectedVariantDisplay) {
      const selected = selectedOptions.filter(v => v !== "").join(" - ");
      selectedVariantDisplay.textContent = selected || "Choose Variant";
    }

    updateDropdownOptions();
    updateVariantTitle();
    matchInsuranceVariant(matchedVariant);

    if (typeof Currency !== 'undefined' && typeof Currency.convertAll === 'function') {
      Currency.convertAll(shopCurrency, Currency.currentCurrency);
    }

    return matchedVariant;
  }

let cachedUSDRate = null; // Simpan kurs agar tidak fetch berkali-kali

async function getExchangeRate() {
  if (cachedUSDRate) return cachedUSDRate; // Jika sudah ada, pakai yang lama
  try {
    const response = await fetch('https://api.exchangerate-api.com/v4/latest/IDR');
    const data = await response.json();
    cachedUSDRate = data.rates.USD;
    return cachedUSDRate;
  } catch (error) {
    console.error('Gagal ambil kurs USD:', error);
    cachedUSDRate = 0.000066; // fallback
    return cachedUSDRate;
  }
}

function convertIDRtoUSDInstant(idrAmount) {
  const rate = cachedUSDRate || 0.000066; // Gunakan cache kalau ada
  return (idrAmount * rate).toFixed(2);
}

async function updateUSDPrice(variantPrice, quantity) {
  const totalIDR = (variantPrice / 100) * quantity;

  // ✅ Hitung langsung tanpa nunggu fetch
  const usdPriceInstant = convertIDRtoUSDInstant(totalIDR);

  let usdElementDesktop = document.getElementById('usd-price-desktop');
  let usdElementMobile = document.getElementById('usd-price-mobile');

  if (!usdElementDesktop) {
    const desktopContainer = document.getElementById('variant-price-desktop');
    usdElementDesktop = document.createElement('div');
    usdElementDesktop.id = 'usd-price-desktop';
    usdElementDesktop.className = 'money';
    desktopContainer.appendChild(usdElementDesktop);
  }
  usdElementDesktop.textContent = `$${usdPriceInstant}`;

  if (!usdElementMobile) {
    const mobileContainer = document.getElementById('variant-price-mobile');
    usdElementMobile = document.createElement('div');
    usdElementMobile.id = 'usd-price-mobile';
    mobileContainer.appendChild(usdElementMobile);
  }
  usdElementMobile.textContent = `USD $${usdPriceInstant}`;

  toggleCurrencyDisplay();

  // ✅ Ambil kurs terbaru di background (sekali saja)
  if (!cachedUSDRate) {
    const rate = await getExchangeRate();
    const usdPriceFinal = (totalIDR * rate).toFixed(2);
    usdElementDesktop.textContent = `$${usdPriceFinal}`;
    usdElementMobile.textContent = `USD $${usdPriceFinal}`;
  }
}

function updateIDRPrice(variantPrice, quantity) {
  const totalIDR = (variantPrice / 100) * quantity; // Shopify pakai cent
  const formattedIDR = new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR'
  }).format(totalIDR);

  let idrElementDesktop = document.getElementById('idr-price-desktop');
  let idrElementMobile = document.getElementById('idr-price-mobile');

  if (!idrElementDesktop) {
    const desktopContainer = document.getElementById('variant-price-desktop');
    idrElementDesktop = document.createElement('div');
    idrElementDesktop.id = 'idr-price-desktop';
    idrElementDesktop.className = 'money';
    desktopContainer.appendChild(idrElementDesktop);
  }
  idrElementDesktop.textContent = formattedIDR;

  if (!idrElementMobile) {
    const mobileContainer = document.getElementById('variant-price-mobile');
    idrElementMobile = document.createElement('div');
    idrElementMobile.className = 'money';
    idrElementMobile.id = 'idr-price-mobile';
    mobileContainer.appendChild(idrElementMobile);
  }
  idrElementMobile.textContent = formattedIDR;

  // ✅ Panggil toggle setelah update
  toggleCurrencyDisplay();
}

function toggleCurrencyDisplay() {
  let userCurrency = sessionStorage.getItem('buckscc_customer_currency');
  if (userCurrency) {
    userCurrency = userCurrency.replace(/"/g, ''); // Bersihkan tanda kutip
  }

  const idrPriceDesktop = document.getElementById('idr-price-desktop');
  const usdPriceDesktop = document.getElementById('usd-price-desktop');
  const idrPriceMobile = document.getElementById('idr-price-mobile');
  const usdPriceMobile = document.getElementById('usd-price-mobile');

  console.log("toggleCurrencyDisplay → Currency:", userCurrency);

  if (userCurrency === 'USD') {
    if (idrPriceDesktop) idrPriceDesktop.style.display = 'none';
    if (usdPriceDesktop) usdPriceDesktop.style.display = 'block';
    if (idrPriceMobile) idrPriceMobile.style.display = 'none';
    if (usdPriceMobile) usdPriceMobile.style.display = 'block';
  } else {
    // Default atau IDR
    if (idrPriceDesktop) idrPriceDesktop.style.display = 'block';
    if (usdPriceDesktop) usdPriceDesktop.style.display = 'none';
    if (idrPriceMobile) idrPriceMobile.style.display = 'block';
    if (usdPriceMobile) usdPriceMobile.style.display = 'none';
  }
}

document.addEventListener('DOMContentLoaded', () => {
  toggleCurrencyDisplay();
});


let lastCurrency = sessionStorage.getItem('buckscc_customer_currency');

// Jalankan pengecekan setiap 500ms (bisa dioptimasi)
setInterval(() => {
  const currentCurrency = sessionStorage.getItem('buckscc_customer_currency');
  if (currentCurrency !== lastCurrency) {
    lastCurrency = currentCurrency;
    console.log("Currency berubah →", currentCurrency);
    handleCurrencyChange();
  }
}, 500);

function handleCurrencyChange() {
  const variant = findVariant();
  if (variant) {
    const quantity = parseInt(document.getElementById('quantity').value) || 1;
    updateUSDPrice(variant.price, quantity);
    updateIDRPrice(variant.price, quantity);
    toggleCurrencyDisplay();
  } else {
    toggleCurrencyDisplay();
  }
}



  function matchInsuranceVariant(mainVariant) {
    const quantityInput = document.getElementById('quantity');
    const currentQuantity = quantityInput ? parseInt(quantityInput.value) || 1 : 1;

    const insuranceVariants = document.querySelectorAll('.insurance-addon__wrapper [data-title]');
    const matchedInsuranceList = [];

    insuranceVariants.forEach((el) => {
      const option1 = el.dataset.option1?.trim();
      const option2 = el.dataset.option2?.trim();
      const option3 = el.dataset.option3?.trim();
      const addonType = el.dataset.addonType?.trim()?.toLowerCase(); // 'covid' or 'general'

      const mainOption1 = mainVariant.options[0]?.trim();
      const mainOption2 = mainVariant.options[1]?.trim();
      const mainOption3 = mainVariant.options[2]?.trim();

      let isMatch = false;

      if (addonType === 'covid') {
        isMatch = (option1 === mainOption1 && option2 === mainOption2 && option3 === mainOption3);
      } else if (addonType === 'general') {
        isMatch = (option1 === mainOption1 && option2 === mainOption2);
      }

    if (isMatch) {
      // Tentukan judul tampil
      let displayTitle = '';
      if (addonType === 'covid') {
        displayTitle = 'Covid-19 Protection';
      } else if (addonType === 'general') {
        displayTitle = option3 || el.dataset.title;
      }

      // Tentukan isi <li>
      let benefits = [];
      if (addonType === 'covid') {
        benefits = [
          'Trip Cancellation',
          'Medical Expenses Including Emergency Medical Evacuation',
          'Additional Expenses',
          'Trip Curtailment or Return of Children',
          'Automatic extension of Cover'
        ];
      } else if (addonType === 'general') {
        if (option3 === 'Business Travel') {
          benefits = [
            'Staff Replacement',
            'Business Equipment',
            'Missed Events Fee'
          ];
        } else if (option3 === 'Cruise Cover') {
          benefits = [
            'Cabin Confinement',
            'Itinerary Change',
            'Unused Excursion',
            'Cruise Trip Interruption'
          ];
        } else if (option3 === 'Winter Sport' || option3 === 'Winter Sports') {
          benefits = [
            'Winter Sport Pack',
            'On piste Closure'
          ];
        } else {
          benefits = [];
        }
      }

      matchedInsuranceList.push({
        title: displayTitle,
        addonType: addonType,
        price: el.dataset.price,
        id: el.dataset.variantId,
        option1: el.dataset.option1,
        option2: el.dataset.option2,
        option3: el.dataset.option3,
        quantity: currentQuantity,
        benefits: benefits
      });
    }
  });

  const selectedVariantTitleDisplay = document.getElementById('selected-variant-title');

  if (selectedVariantTitleDisplay) {
    if (matchedInsuranceList.length > 0) {
      const rows = matchedInsuranceList.map(item => {
        const benefitList = item.benefits.map(benefit => `<li>${benefit}</li>`).join('');
        return `
        <div class="insurance__product-addon">
          <div class="insurance_product-addon_header">
            <div class="insurance_product-addon_title-wrapper"> 
              <h1 class="insurance_product-addon_title">${item.title}</h1>
              <span class="insurance_product-addon_price">${item.price}</span>
            </div>
            <div class="addon-checkbox">
              <input 
                type="checkbox" 
                data-id="${item.id}" 
                data-variant-title="${item.title}" 
                data-option1="${item.option1}" 
                data-option2="${item.option2}" 
                data-option3="${item.option3}"
                data-quantity="${item.quantity}"
              >
              <span>select</span>
            </div>
            </div>
          </div>
          <div class="insurance_product-addon_list-benefits">
            <ul>
                ${benefitList}
            </ul>
          </div>
        </div>
        `;
      }).join('');

      selectedVariantTitleDisplay.innerHTML = rows;
    } else {
      selectedVariantTitleDisplay.innerHTML = `No matching insurance`;
    }
  }
}

  function adjustQuantity(delta) {
    const current = parseInt(quantityInput.value) || 1;
    quantityInput.value = Math.max(quantityInput.min, current + delta);
    findVariant(); // Sudah memanggil updateUSDPrice()
  }

  minusBtn?.addEventListener('click', () => adjustQuantity(-1));
  plusBtn?.addEventListener('click', () => adjustQuantity(1));

  // ✅ Perubahan manual qty update harga
  // ✅ Update USD price saat quantity diketik manual (tanpa kedip)
quantityInput?.addEventListener('input', () => {
  const variant = findVariant();
  if (variant) {
    updateUSDPrice(variant.price, parseInt(quantityInput.value) || 1);
    updateIDRPrice(variant.price, parseInt(quantityInput.value) || 1);
  }
});


  resetBtn?.addEventListener('click', () => {
    variantDropdowns.forEach(select => {
      select.selectedIndex = 0;
    });
    quantityInput.min = 1;
    quantityInput.value = 1;
    updateMinusButtonHandler(1);

    if (priceDivDesktop) priceDivDesktop.innerHTML = defaultPriceHTML;
    if (priceDivMobile) priceDivMobile.innerHTML = defaultPriceMobileHTML;

    if (selectedVariantDisplay) selectedVariantDisplay.textContent = "Selected Variant";
    updateDropdownOptions();
    updateVariantTitle(); // Reset variant title saat reset

    if (typeof Currency !== 'undefined' && typeof Currency.convertAll === 'function') {
      Currency.convertAll(shopCurrency, Currency.currentCurrency);
    }
  });

  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const countEl = document.getElementById('cart-count');
        if (countEl) {
          countEl.textContent = cart.item_count;
        }
      })
      .catch(error => {
        console.error("Failed to update cart count:", error);
      });
  }

  function handleCartAction(action) {
    const variant = findVariant();
    const quantity = parseInt(quantityInput.value) || 1;

    const variantCoverage = window.productCoverage || [];

    if (!variant || !variant.available) {
      let hasEmpty = false;
      variantDropdowns.forEach(select => {
        if (select.value === "") {
          select.classList.add("variant-warning");
          hasEmpty = true;
        }
      });

      if (hasEmpty) {
        const firstEmpty = Array.from(variantDropdowns).find(select => select.value === "");
        if (firstEmpty) {
          firstEmpty.scrollIntoView({ behavior: "smooth", block: "center" });
        }
      }

      return;
    }

    const productCategory = "{{ product.metafields.product.category.value }}";

    if (action === "buy" && productCategory === "Insurance") {
      const variantType = getVariantType(variant);

      sessionStorage.removeItem('ProductItems');

    const selectedAddons = JSON.parse(sessionStorage.getItem('SelectedAddons') || '[]');

    const newItem = {
      productTitle: "{{ product.title }}",
      category: productCategory,
      variantType: variantType,
      variantId: variant.id,
      variantTitle: variant.title,
      quantity: quantity,
      variantCoverage: variantCoverage,
      addonItems: selectedAddons.map(addon => ({
        productTitle: addon.variantTitle,
        variantId: addon.id,
        variantTitle: addon.variantTitle,
        quantity: addon.quantity,
        option1: addon.option1,
        option2: addon.option2,
        option3: addon.option3
      }))
    };
  
  const ProductItems = [newItem];
  sessionStorage.setItem('ProductItems', JSON.stringify(ProductItems));

        if (customerLoggedIn) {
          window.location.href = "/pages/form-insurance";
        } else {
          window.location.href = "/account/login?return_url=/pages/form-insurance";
        }

        return;
      }

      const payload = { id: variant.id, quantity: quantity };
      const popup = document.getElementById("variant-popup");

      function showPopup(message) {
        const messageEl = document.getElementById("variant-popup-message");
        if (messageEl) {
          messageEl.textContent = message;
        }

        popup.style.display = "block";
        setTimeout(() => {
          popup.style.display = "none";
        }, 2000);
      }

      if (action === "buy") {
        fetch("/cart/clear.js", { method: "POST" }).then(() => {
          fetch("/cart/add.js", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
          }).then(() => {
            window.location.href = "/checkout";
          });
        });
      } else {
        fetch("/cart/add.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest"
          },
          body: JSON.stringify(payload)
        })
        .then(res => res.json())
        .then(() => {
          showPopup("Item successfully added to cart.");
          updateCartCount();
        })
        .catch(err => {
          console.error("Add to cart failed:", err);
          showPopup("Failed to add product");
        });
      }
    }

    const buyTopUpDesktop = document.getElementById("buy-topup-button");
    const buyTopUpMobile = document.getElementById("buy-topup-button-mobile");

    buyTopUpDesktop?.addEventListener("click", handleBuyTopUp);
    buyTopUpMobile?.addEventListener("click", handleBuyTopUp);

    function handleBuyTopUp() {
      const variant = findVariant();
      const quantity = 1;
      let iccid = sessionStorage.getItem("iccid");

      if (!variant || !variant.available) {
        let hasEmpty = false;
        variantDropdowns.forEach(select => {
          if (select.value === "") {
            select.classList.add("variant-warning");
            hasEmpty = true;
          }
        });

        if (hasEmpty) {
          const firstEmpty = Array.from(variantDropdowns).find(select => select.value === "");
          if (firstEmpty) {
            firstEmpty.scrollIntoView({ behavior: "smooth", block: "center" });
          }
        }
        return;
      }

      // ✅ Validasi ICCID
      if (!iccid || iccid.trim() === "") {
        showICCIDPopup();
        return;
      }

      proceedToCheckout(iccid, variant, quantity);
    }

    // ✅ Fungsi untuk memproses ke checkout
    function proceedToCheckout(iccid, variant, quantity) {
      const payload = {
        id: variant.id,
        quantity: quantity,
        attributes: {
          iccid: iccid
        }
      };

      fetch("/cart/clear.js", { method: "POST" }).then(() => {
        fetch("/cart/add.js", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(payload)
        })
        .then(() => {
          window.location.href = "/checkout";
        })
        .catch(err => {
          console.error("Failed to add top up product:", err);
          showPopupMessage("Failed to buy top up.");
        });
      });
    }

    
    // ✅ Popup Input ICCID
    function showICCIDPopup() {
      // Cek apakah popup sudah ada
      let popup = document.getElementById("iccid-popup");
      if (!popup) {
        popup = document.createElement("div");
        popup.id = "iccid-popup";
        popup.classList.add("iccid-popup");
        popup.innerHTML = `
        <style>
        #iccid-input::placeholder {
          color: var(--color-primary);
        }
        </style>
          <h3 style="margin: 0; line-height: 1.3; font-size: var(--font-extra-large); font-weight: bold; color: var(--color-primary);">Enter Your ICCID</h3>
          <input type="text" id="iccid-input" placeholder="Input ICCID Number" style="width: 100%; padding: 15px 10px; border-radius: 10px; outline: none; border: 1px solid var(--color-primary); background-color: var(--color-background); margin: 10px 0;">
          <div style="display: flex; justify-content: flex-end;">
            <button id="iccid-submit" style="padding: 10px 20px; border-radius: 10px; border: none; cursor: pointer; background-color: var(--color-primary); color: var(--color-neutral); font-size: var(--font-large);">Next</button>
          </div>
        `;
        document.body.appendChild(popup);

        document.getElementById("iccid-submit").addEventListener("click", () => {
          const iccidValue = document.getElementById("iccid-input").value.trim();
          if (iccidValue) {
            sessionStorage.setItem("iccid", iccidValue);
            popup.remove();
            const variant = findVariant();
            const quantity = 1;
            proceedToCheckout(iccidValue, variant, quantity);
          } else {
            alert("Please enter ICCID");
          }
        });
      }
    }

    function showPopupMessage(message) {
      const popup = document.getElementById("variant-popup");
      const messageEl = document.getElementById("variant-popup-message");
      if (popup && messageEl) {
        messageEl.textContent = message;
        popup.style.display = "block";
        setTimeout(() => {
          popup.style.display = "none";
        }, 2000);
      }
    }


    function getVariantType(variant) {
      window.variantsData = [
        {% for variant in product.variants %}
          {
            id: {{ variant.id }},
            title: "{{ variant.title | escape }}",
            type: {{ variant.metafields.variant.type | json }},
            options: [
              {% for option in variant.options %}
                "{{ option | escape }}"{% unless forloop.last %},{% endunless %}
              {% endfor %}
            ]
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ];

      const matchedVariant = variantsData.find(v => v.id === variant.id);
      if (matchedVariant && matchedVariant.type) {
        if (Array.isArray(matchedVariant.type)) {
          return matchedVariant.type.join(', ');
        } else if (typeof matchedVariant.type === 'object' && matchedVariant.type.value) {
          return matchedVariant.type.value;
        } else {
          return matchedVariant.type;
        }
      }
      return '';
    }

    variantDropdowns.forEach(select => {
      select.addEventListener('change', function () {
        // Hapus border merah jika user memilih value
        if (select.value !== "") {
          select.classList.remove('variant-warning');
        }

        findVariant();
      });
    });


    updateDropdownOptions();
    updateMinusButtonHandler(1);
        // 🟢 Simpan addon yang dipilih ke sessionStorage
    function updateAddonSessionStorage() {
      const addonCheckboxes = document.querySelectorAll('.addon-checkbox input[type="checkbox"]');
      const selectedAddons = [];

      addonCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
          selectedAddons.push({
            id: checkbox.dataset.id,
            variantTitle: checkbox.dataset.variantTitle,
            option1: checkbox.dataset.option1,
            option2: checkbox.dataset.option2,
            option3: checkbox.dataset.option3,
            quantity: parseInt(checkbox.dataset.quantity || '1'),
          });
        }
      });

      sessionStorage.setItem('SelectedAddons', JSON.stringify(selectedAddons));
    }

    // 🟢 Update sessionStorage setiap kali checkbox diubah
    document.addEventListener('change', function (e) {
      if (e.target.matches('.addon-checkbox input[type="checkbox"]')) {
        updateAddonSessionStorage();
      }
    });
</script>
